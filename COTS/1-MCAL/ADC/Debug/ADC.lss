
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000143c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000143c  000014d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800066  00800066  000014d6  2**0
                  ALLOC
  3 .stab         000022b0  00000000  00000000  000014d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e2a  00000000  00000000  00003788  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 19 04 	jmp	0x832	; 0x832 <__vector_1>
       8:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__vector_2>
       c:	0c 94 87 04 	jmp	0x90e	; 0x90e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 37       	cpi	r26, 0x76	; 118
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <main>
      8a:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <PORT_voidInit>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	ea e3       	ldi	r30, 0x3A	; 58
      9c:	f0 e0       	ldi	r31, 0x00	; 0
      9e:	10 82       	st	Z, r1
      a0:	e7 e3       	ldi	r30, 0x37	; 55
      a2:	f0 e0       	ldi	r31, 0x00	; 0
      a4:	10 82       	st	Z, r1
      a6:	e4 e3       	ldi	r30, 0x34	; 52
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	8f ef       	ldi	r24, 0xFF	; 255
      ac:	80 83       	st	Z, r24
      ae:	e1 e3       	ldi	r30, 0x31	; 49
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	10 82       	st	Z, r1
      b4:	eb e3       	ldi	r30, 0x3B	; 59
      b6:	f0 e0       	ldi	r31, 0x00	; 0
      b8:	10 82       	st	Z, r1
      ba:	e8 e3       	ldi	r30, 0x38	; 56
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	10 82       	st	Z, r1
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	10 82       	st	Z, r1
      c6:	e2 e3       	ldi	r30, 0x32	; 50
      c8:	f0 e0       	ldi	r31, 0x00	; 0
      ca:	10 82       	st	Z, r1
      cc:	cf 91       	pop	r28
      ce:	df 91       	pop	r29
      d0:	08 95       	ret

000000d2 <GIE_enuEnable>:
#include   "GIE_Interface.h"
#include   "GIE_Private.h"


ES_t   GIE_enuEnable(void)
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	0f 92       	push	r0
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
	ES_t  Local_enuErrorState = ES_NOK;
      dc:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(SREG , SREG_I);
      de:	af e5       	ldi	r26, 0x5F	; 95
      e0:	b0 e0       	ldi	r27, 0x00	; 0
      e2:	ef e5       	ldi	r30, 0x5F	; 95
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	80 81       	ld	r24, Z
      e8:	80 68       	ori	r24, 0x80	; 128
      ea:	8c 93       	st	X, r24

	return   Local_enuErrorState;
      ec:	89 81       	ldd	r24, Y+1	; 0x01
}
      ee:	0f 90       	pop	r0
      f0:	cf 91       	pop	r28
      f2:	df 91       	pop	r29
      f4:	08 95       	ret

000000f6 <GIE_enuDisable>:

ES_t   GIE_enuDisable(void)
{
      f6:	df 93       	push	r29
      f8:	cf 93       	push	r28
      fa:	0f 92       	push	r0
      fc:	cd b7       	in	r28, 0x3d	; 61
      fe:	de b7       	in	r29, 0x3e	; 62
	ES_t  Local_enuErrorState = ES_NOK;
     100:	19 82       	std	Y+1, r1	; 0x01

	CLEAR_BIT(SREG , SREG_I);
     102:	af e5       	ldi	r26, 0x5F	; 95
     104:	b0 e0       	ldi	r27, 0x00	; 0
     106:	ef e5       	ldi	r30, 0x5F	; 95
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	8f 77       	andi	r24, 0x7F	; 127
     10e:	8c 93       	st	X, r24

	return   Local_enuErrorState;
     110:	89 81       	ldd	r24, Y+1	; 0x01
}
     112:	0f 90       	pop	r0
     114:	cf 91       	pop	r28
     116:	df 91       	pop	r29
     118:	08 95       	ret

0000011a <EXTI_enuInitialize>:
/*****************************************************************************/
/*****************************************************************************/


ES_t  EXTI_enuInitialize(EXTI_t *Copy_pstrEXTIConfig)
{
     11a:	df 93       	push	r29
     11c:	cf 93       	push	r28
     11e:	cd b7       	in	r28, 0x3d	; 61
     120:	de b7       	in	r29, 0x3e	; 62
     122:	2c 97       	sbiw	r28, 0x0c	; 12
     124:	0f b6       	in	r0, 0x3f	; 63
     126:	f8 94       	cli
     128:	de bf       	out	0x3e, r29	; 62
     12a:	0f be       	out	0x3f, r0	; 63
     12c:	cd bf       	out	0x3d, r28	; 61
     12e:	9c 83       	std	Y+4, r25	; 0x04
     130:	8b 83       	std	Y+3, r24	; 0x03
	ES_t  Local_enuErrorState = ES_NOK;
     132:	1a 82       	std	Y+2, r1	; 0x02
	u8    Local_u8Iterator = 0;
     134:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pstrEXTIConfig != NULL)
     136:	8b 81       	ldd	r24, Y+3	; 0x03
     138:	9c 81       	ldd	r25, Y+4	; 0x04
     13a:	00 97       	sbiw	r24, 0x00	; 0
     13c:	09 f4       	brne	.+2      	; 0x140 <EXTI_enuInitialize+0x26>
     13e:	78 c1       	rjmp	.+752    	; 0x430 <EXTI_enuInitialize+0x316>
	{
		/*Iterate on AstrEXTIConfig to check which interrupt pin is activated & initialize it*/
		for(Local_u8Iterator = 0 ; Local_u8Iterator < NUMBER_OF_INTERRUPT_PINS ; Local_u8Iterator++)
     140:	19 82       	std	Y+1, r1	; 0x01
     142:	71 c1       	rjmp	.+738    	; 0x426 <EXTI_enuInitialize+0x30c>
		{
			if(Copy_pstrEXTIConfig[Local_u8Iterator].EXTI_u8State == ACTIVATED)
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	88 2f       	mov	r24, r24
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	9c 01       	movw	r18, r24
     14c:	22 0f       	add	r18, r18
     14e:	33 1f       	adc	r19, r19
     150:	8b 81       	ldd	r24, Y+3	; 0x03
     152:	9c 81       	ldd	r25, Y+4	; 0x04
     154:	fc 01       	movw	r30, r24
     156:	e2 0f       	add	r30, r18
     158:	f3 1f       	adc	r31, r19
     15a:	80 81       	ld	r24, Z
     15c:	81 30       	cpi	r24, 0x01	; 1
     15e:	09 f0       	breq	.+2      	; 0x162 <EXTI_enuInitialize+0x48>
     160:	5f c1       	rjmp	.+702    	; 0x420 <EXTI_enuInitialize+0x306>
			{
				switch(Local_u8Iterator)
     162:	89 81       	ldd	r24, Y+1	; 0x01
     164:	28 2f       	mov	r18, r24
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	3c 87       	std	Y+12, r19	; 0x0c
     16a:	2b 87       	std	Y+11, r18	; 0x0b
     16c:	8b 85       	ldd	r24, Y+11	; 0x0b
     16e:	9c 85       	ldd	r25, Y+12	; 0x0c
     170:	81 30       	cpi	r24, 0x01	; 1
     172:	91 05       	cpc	r25, r1
     174:	09 f4       	brne	.+2      	; 0x178 <EXTI_enuInitialize+0x5e>
     176:	92 c0       	rjmp	.+292    	; 0x29c <EXTI_enuInitialize+0x182>
     178:	2b 85       	ldd	r18, Y+11	; 0x0b
     17a:	3c 85       	ldd	r19, Y+12	; 0x0c
     17c:	22 30       	cpi	r18, 0x02	; 2
     17e:	31 05       	cpc	r19, r1
     180:	09 f4       	brne	.+2      	; 0x184 <EXTI_enuInitialize+0x6a>
     182:	13 c1       	rjmp	.+550    	; 0x3aa <EXTI_enuInitialize+0x290>
     184:	8b 85       	ldd	r24, Y+11	; 0x0b
     186:	9c 85       	ldd	r25, Y+12	; 0x0c
     188:	00 97       	sbiw	r24, 0x00	; 0
     18a:	09 f0       	breq	.+2      	; 0x18e <EXTI_enuInitialize+0x74>
     18c:	47 c1       	rjmp	.+654    	; 0x41c <EXTI_enuInitialize+0x302>
				{
				case 0:

					/*Clearing MCUCR bits for INT1*/

					CLEAR_BIT(MCUCR , MCUCR_ISC10);
     18e:	a5 e5       	ldi	r26, 0x55	; 85
     190:	b0 e0       	ldi	r27, 0x00	; 0
     192:	e5 e5       	ldi	r30, 0x55	; 85
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	80 81       	ld	r24, Z
     198:	8b 7f       	andi	r24, 0xFB	; 251
     19a:	8c 93       	st	X, r24
					CLEAR_BIT(MCUCR , MCUCR_ISC11);
     19c:	a5 e5       	ldi	r26, 0x55	; 85
     19e:	b0 e0       	ldi	r27, 0x00	; 0
     1a0:	e5 e5       	ldi	r30, 0x55	; 85
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	80 81       	ld	r24, Z
     1a6:	87 7f       	andi	r24, 0xF7	; 247
     1a8:	8c 93       	st	X, r24

					/*Enable PIE For INT0*/
					SET_BIT(GICR , GICR_INT0);
     1aa:	ab e5       	ldi	r26, 0x5B	; 91
     1ac:	b0 e0       	ldi	r27, 0x00	; 0
     1ae:	eb e5       	ldi	r30, 0x5B	; 91
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	80 81       	ld	r24, Z
     1b4:	80 64       	ori	r24, 0x40	; 64
     1b6:	8c 93       	st	X, r24

					/*Choosing Interrupt Sense Control for INT0*/
					switch(Copy_pstrEXTIConfig[Local_u8Iterator].EXTI_u8SenseLevel)
     1b8:	89 81       	ldd	r24, Y+1	; 0x01
     1ba:	88 2f       	mov	r24, r24
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	9c 01       	movw	r18, r24
     1c0:	22 0f       	add	r18, r18
     1c2:	33 1f       	adc	r19, r19
     1c4:	8b 81       	ldd	r24, Y+3	; 0x03
     1c6:	9c 81       	ldd	r25, Y+4	; 0x04
     1c8:	fc 01       	movw	r30, r24
     1ca:	e2 0f       	add	r30, r18
     1cc:	f3 1f       	adc	r31, r19
     1ce:	81 81       	ldd	r24, Z+1	; 0x01
     1d0:	28 2f       	mov	r18, r24
     1d2:	30 e0       	ldi	r19, 0x00	; 0
     1d4:	3a 87       	std	Y+10, r19	; 0x0a
     1d6:	29 87       	std	Y+9, r18	; 0x09
     1d8:	89 85       	ldd	r24, Y+9	; 0x09
     1da:	9a 85       	ldd	r25, Y+10	; 0x0a
     1dc:	87 30       	cpi	r24, 0x07	; 7
     1de:	91 05       	cpc	r25, r1
     1e0:	39 f1       	breq	.+78     	; 0x230 <EXTI_enuInitialize+0x116>
     1e2:	29 85       	ldd	r18, Y+9	; 0x09
     1e4:	3a 85       	ldd	r19, Y+10	; 0x0a
     1e6:	28 30       	cpi	r18, 0x08	; 8
     1e8:	31 05       	cpc	r19, r1
     1ea:	34 f4       	brge	.+12     	; 0x1f8 <EXTI_enuInitialize+0xde>
     1ec:	89 85       	ldd	r24, Y+9	; 0x09
     1ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     1f0:	86 30       	cpi	r24, 0x06	; 6
     1f2:	91 05       	cpc	r25, r1
     1f4:	61 f0       	breq	.+24     	; 0x20e <EXTI_enuInitialize+0xf4>
     1f6:	4f c0       	rjmp	.+158    	; 0x296 <EXTI_enuInitialize+0x17c>
     1f8:	29 85       	ldd	r18, Y+9	; 0x09
     1fa:	3a 85       	ldd	r19, Y+10	; 0x0a
     1fc:	28 30       	cpi	r18, 0x08	; 8
     1fe:	31 05       	cpc	r19, r1
     200:	c9 f1       	breq	.+114    	; 0x274 <EXTI_enuInitialize+0x15a>
     202:	89 85       	ldd	r24, Y+9	; 0x09
     204:	9a 85       	ldd	r25, Y+10	; 0x0a
     206:	89 30       	cpi	r24, 0x09	; 9
     208:	91 05       	cpc	r25, r1
     20a:	19 f1       	breq	.+70     	; 0x252 <EXTI_enuInitialize+0x138>
     20c:	44 c0       	rjmp	.+136    	; 0x296 <EXTI_enuInitialize+0x17c>
					{
					case FALLING_EDGE:
						SET_BIT(MCUCR , MCUCR_ISC01);
     20e:	a5 e5       	ldi	r26, 0x55	; 85
     210:	b0 e0       	ldi	r27, 0x00	; 0
     212:	e5 e5       	ldi	r30, 0x55	; 85
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	82 60       	ori	r24, 0x02	; 2
     21a:	8c 93       	st	X, r24
						CLEAR_BIT(MCUCR , MCUCR_ISC00);
     21c:	a5 e5       	ldi	r26, 0x55	; 85
     21e:	b0 e0       	ldi	r27, 0x00	; 0
     220:	e5 e5       	ldi	r30, 0x55	; 85
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	8e 7f       	andi	r24, 0xFE	; 254
     228:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	8a 83       	std	Y+2, r24	; 0x02
     22e:	f8 c0       	rjmp	.+496    	; 0x420 <EXTI_enuInitialize+0x306>
						break;
					case RISING_EDGE:
						SET_BIT(MCUCR , MCUCR_ISC01);
     230:	a5 e5       	ldi	r26, 0x55	; 85
     232:	b0 e0       	ldi	r27, 0x00	; 0
     234:	e5 e5       	ldi	r30, 0x55	; 85
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	80 81       	ld	r24, Z
     23a:	82 60       	ori	r24, 0x02	; 2
     23c:	8c 93       	st	X, r24
						SET_BIT(MCUCR , MCUCR_ISC00);
     23e:	a5 e5       	ldi	r26, 0x55	; 85
     240:	b0 e0       	ldi	r27, 0x00	; 0
     242:	e5 e5       	ldi	r30, 0x55	; 85
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	80 81       	ld	r24, Z
     248:	81 60       	ori	r24, 0x01	; 1
     24a:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	8a 83       	std	Y+2, r24	; 0x02
     250:	e7 c0       	rjmp	.+462    	; 0x420 <EXTI_enuInitialize+0x306>
						break;
					case ANY_LOGICAL_CHANGE:
						CLEAR_BIT(MCUCR , MCUCR_ISC01);
     252:	a5 e5       	ldi	r26, 0x55	; 85
     254:	b0 e0       	ldi	r27, 0x00	; 0
     256:	e5 e5       	ldi	r30, 0x55	; 85
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	8d 7f       	andi	r24, 0xFD	; 253
     25e:	8c 93       	st	X, r24
						SET_BIT(MCUCR , MCUCR_ISC00);
     260:	a5 e5       	ldi	r26, 0x55	; 85
     262:	b0 e0       	ldi	r27, 0x00	; 0
     264:	e5 e5       	ldi	r30, 0x55	; 85
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	81 60       	ori	r24, 0x01	; 1
     26c:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	8a 83       	std	Y+2, r24	; 0x02
     272:	d6 c0       	rjmp	.+428    	; 0x420 <EXTI_enuInitialize+0x306>
						break;
					case LOW_LEVEL:
						CLEAR_BIT(MCUCR , MCUCR_ISC01);
     274:	a5 e5       	ldi	r26, 0x55	; 85
     276:	b0 e0       	ldi	r27, 0x00	; 0
     278:	e5 e5       	ldi	r30, 0x55	; 85
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	80 81       	ld	r24, Z
     27e:	8d 7f       	andi	r24, 0xFD	; 253
     280:	8c 93       	st	X, r24
						CLEAR_BIT(MCUCR , MCUCR_ISC00);
     282:	a5 e5       	ldi	r26, 0x55	; 85
     284:	b0 e0       	ldi	r27, 0x00	; 0
     286:	e5 e5       	ldi	r30, 0x55	; 85
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	80 81       	ld	r24, Z
     28c:	8e 7f       	andi	r24, 0xFE	; 254
     28e:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	8a 83       	std	Y+2, r24	; 0x02
     294:	c5 c0       	rjmp	.+394    	; 0x420 <EXTI_enuInitialize+0x306>
						break;
					default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
     296:	83 e0       	ldi	r24, 0x03	; 3
     298:	8a 83       	std	Y+2, r24	; 0x02
     29a:	c2 c0       	rjmp	.+388    	; 0x420 <EXTI_enuInitialize+0x306>
					break;
					case 1:

						/*Clearing MCUCR bits for INT1*/

						CLEAR_BIT(MCUCR , MCUCR_ISC00);
     29c:	a5 e5       	ldi	r26, 0x55	; 85
     29e:	b0 e0       	ldi	r27, 0x00	; 0
     2a0:	e5 e5       	ldi	r30, 0x55	; 85
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	80 81       	ld	r24, Z
     2a6:	8e 7f       	andi	r24, 0xFE	; 254
     2a8:	8c 93       	st	X, r24
						CLEAR_BIT(MCUCR , MCUCR_ISC01);
     2aa:	a5 e5       	ldi	r26, 0x55	; 85
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	e5 e5       	ldi	r30, 0x55	; 85
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	8d 7f       	andi	r24, 0xFD	; 253
     2b6:	8c 93       	st	X, r24

						/*Enable PIE For INT1*/
						SET_BIT(GICR , GICR_INT1);
     2b8:	ab e5       	ldi	r26, 0x5B	; 91
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	eb e5       	ldi	r30, 0x5B	; 91
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	80 68       	ori	r24, 0x80	; 128
     2c4:	8c 93       	st	X, r24

						/*Choosing Interrupt Sense Control for INT1*/
						switch(Copy_pstrEXTIConfig[Local_u8Iterator].EXTI_u8SenseLevel)
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
     2c8:	88 2f       	mov	r24, r24
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	9c 01       	movw	r18, r24
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	8b 81       	ldd	r24, Y+3	; 0x03
     2d4:	9c 81       	ldd	r25, Y+4	; 0x04
     2d6:	fc 01       	movw	r30, r24
     2d8:	e2 0f       	add	r30, r18
     2da:	f3 1f       	adc	r31, r19
     2dc:	81 81       	ldd	r24, Z+1	; 0x01
     2de:	28 2f       	mov	r18, r24
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	38 87       	std	Y+8, r19	; 0x08
     2e4:	2f 83       	std	Y+7, r18	; 0x07
     2e6:	8f 81       	ldd	r24, Y+7	; 0x07
     2e8:	98 85       	ldd	r25, Y+8	; 0x08
     2ea:	87 30       	cpi	r24, 0x07	; 7
     2ec:	91 05       	cpc	r25, r1
     2ee:	39 f1       	breq	.+78     	; 0x33e <EXTI_enuInitialize+0x224>
     2f0:	2f 81       	ldd	r18, Y+7	; 0x07
     2f2:	38 85       	ldd	r19, Y+8	; 0x08
     2f4:	28 30       	cpi	r18, 0x08	; 8
     2f6:	31 05       	cpc	r19, r1
     2f8:	34 f4       	brge	.+12     	; 0x306 <EXTI_enuInitialize+0x1ec>
     2fa:	8f 81       	ldd	r24, Y+7	; 0x07
     2fc:	98 85       	ldd	r25, Y+8	; 0x08
     2fe:	86 30       	cpi	r24, 0x06	; 6
     300:	91 05       	cpc	r25, r1
     302:	61 f0       	breq	.+24     	; 0x31c <EXTI_enuInitialize+0x202>
     304:	4f c0       	rjmp	.+158    	; 0x3a4 <EXTI_enuInitialize+0x28a>
     306:	2f 81       	ldd	r18, Y+7	; 0x07
     308:	38 85       	ldd	r19, Y+8	; 0x08
     30a:	28 30       	cpi	r18, 0x08	; 8
     30c:	31 05       	cpc	r19, r1
     30e:	c9 f1       	breq	.+114    	; 0x382 <EXTI_enuInitialize+0x268>
     310:	8f 81       	ldd	r24, Y+7	; 0x07
     312:	98 85       	ldd	r25, Y+8	; 0x08
     314:	89 30       	cpi	r24, 0x09	; 9
     316:	91 05       	cpc	r25, r1
     318:	19 f1       	breq	.+70     	; 0x360 <EXTI_enuInitialize+0x246>
     31a:	44 c0       	rjmp	.+136    	; 0x3a4 <EXTI_enuInitialize+0x28a>
						{
						case FALLING_EDGE:
							SET_BIT(MCUCR , MCUCR_ISC11);
     31c:	a5 e5       	ldi	r26, 0x55	; 85
     31e:	b0 e0       	ldi	r27, 0x00	; 0
     320:	e5 e5       	ldi	r30, 0x55	; 85
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	80 81       	ld	r24, Z
     326:	88 60       	ori	r24, 0x08	; 8
     328:	8c 93       	st	X, r24
							CLEAR_BIT(MCUCR , MCUCR_ISC10);
     32a:	a5 e5       	ldi	r26, 0x55	; 85
     32c:	b0 e0       	ldi	r27, 0x00	; 0
     32e:	e5 e5       	ldi	r30, 0x55	; 85
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	80 81       	ld	r24, Z
     334:	8b 7f       	andi	r24, 0xFB	; 251
     336:	8c 93       	st	X, r24
							Local_enuErrorState = ES_OK;
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	8a 83       	std	Y+2, r24	; 0x02
     33c:	71 c0       	rjmp	.+226    	; 0x420 <EXTI_enuInitialize+0x306>
							break;
						case RISING_EDGE:
							SET_BIT(MCUCR , MCUCR_ISC11);
     33e:	a5 e5       	ldi	r26, 0x55	; 85
     340:	b0 e0       	ldi	r27, 0x00	; 0
     342:	e5 e5       	ldi	r30, 0x55	; 85
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	80 81       	ld	r24, Z
     348:	88 60       	ori	r24, 0x08	; 8
     34a:	8c 93       	st	X, r24
							SET_BIT(MCUCR , MCUCR_ISC10);
     34c:	a5 e5       	ldi	r26, 0x55	; 85
     34e:	b0 e0       	ldi	r27, 0x00	; 0
     350:	e5 e5       	ldi	r30, 0x55	; 85
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	80 81       	ld	r24, Z
     356:	84 60       	ori	r24, 0x04	; 4
     358:	8c 93       	st	X, r24
							Local_enuErrorState = ES_OK;
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	8a 83       	std	Y+2, r24	; 0x02
     35e:	60 c0       	rjmp	.+192    	; 0x420 <EXTI_enuInitialize+0x306>
							break;
						case ANY_LOGICAL_CHANGE:
							CLEAR_BIT(MCUCR , MCUCR_ISC11);
     360:	a5 e5       	ldi	r26, 0x55	; 85
     362:	b0 e0       	ldi	r27, 0x00	; 0
     364:	e5 e5       	ldi	r30, 0x55	; 85
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	80 81       	ld	r24, Z
     36a:	87 7f       	andi	r24, 0xF7	; 247
     36c:	8c 93       	st	X, r24
							SET_BIT(MCUCR , MCUCR_ISC10);
     36e:	a5 e5       	ldi	r26, 0x55	; 85
     370:	b0 e0       	ldi	r27, 0x00	; 0
     372:	e5 e5       	ldi	r30, 0x55	; 85
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	84 60       	ori	r24, 0x04	; 4
     37a:	8c 93       	st	X, r24
							Local_enuErrorState = ES_OK;
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	8a 83       	std	Y+2, r24	; 0x02
     380:	4f c0       	rjmp	.+158    	; 0x420 <EXTI_enuInitialize+0x306>
							break;
						case LOW_LEVEL:
							CLEAR_BIT(MCUCR , MCUCR_ISC11);
     382:	a5 e5       	ldi	r26, 0x55	; 85
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e5 e5       	ldi	r30, 0x55	; 85
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	80 81       	ld	r24, Z
     38c:	87 7f       	andi	r24, 0xF7	; 247
     38e:	8c 93       	st	X, r24
							CLEAR_BIT(MCUCR , MCUCR_ISC10);
     390:	a5 e5       	ldi	r26, 0x55	; 85
     392:	b0 e0       	ldi	r27, 0x00	; 0
     394:	e5 e5       	ldi	r30, 0x55	; 85
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	80 81       	ld	r24, Z
     39a:	8b 7f       	andi	r24, 0xFB	; 251
     39c:	8c 93       	st	X, r24
							Local_enuErrorState = ES_OK;
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	8a 83       	std	Y+2, r24	; 0x02
     3a2:	3e c0       	rjmp	.+124    	; 0x420 <EXTI_enuInitialize+0x306>
							break;
						default:
							Local_enuErrorState = ES_OUT_OF_RANGE;
     3a4:	83 e0       	ldi	r24, 0x03	; 3
     3a6:	8a 83       	std	Y+2, r24	; 0x02
     3a8:	3b c0       	rjmp	.+118    	; 0x420 <EXTI_enuInitialize+0x306>
						}
						break;
						case 2:

							/*Enable PIE For INT2*/
							SET_BIT(GICR , GICR_INT2);
     3aa:	ab e5       	ldi	r26, 0x5B	; 91
     3ac:	b0 e0       	ldi	r27, 0x00	; 0
     3ae:	eb e5       	ldi	r30, 0x5B	; 91
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	80 81       	ld	r24, Z
     3b4:	80 62       	ori	r24, 0x20	; 32
     3b6:	8c 93       	st	X, r24

							/*Choosing Interrupt Sense Control for INT2*/
							switch(Copy_pstrEXTIConfig[Local_u8Iterator].EXTI_u8SenseLevel)
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
     3ba:	88 2f       	mov	r24, r24
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	9c 01       	movw	r18, r24
     3c0:	22 0f       	add	r18, r18
     3c2:	33 1f       	adc	r19, r19
     3c4:	8b 81       	ldd	r24, Y+3	; 0x03
     3c6:	9c 81       	ldd	r25, Y+4	; 0x04
     3c8:	fc 01       	movw	r30, r24
     3ca:	e2 0f       	add	r30, r18
     3cc:	f3 1f       	adc	r31, r19
     3ce:	81 81       	ldd	r24, Z+1	; 0x01
     3d0:	28 2f       	mov	r18, r24
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	3e 83       	std	Y+6, r19	; 0x06
     3d6:	2d 83       	std	Y+5, r18	; 0x05
     3d8:	8d 81       	ldd	r24, Y+5	; 0x05
     3da:	9e 81       	ldd	r25, Y+6	; 0x06
     3dc:	86 30       	cpi	r24, 0x06	; 6
     3de:	91 05       	cpc	r25, r1
     3e0:	31 f0       	breq	.+12     	; 0x3ee <EXTI_enuInitialize+0x2d4>
     3e2:	2d 81       	ldd	r18, Y+5	; 0x05
     3e4:	3e 81       	ldd	r19, Y+6	; 0x06
     3e6:	27 30       	cpi	r18, 0x07	; 7
     3e8:	31 05       	cpc	r19, r1
     3ea:	59 f0       	breq	.+22     	; 0x402 <EXTI_enuInitialize+0x2e8>
     3ec:	14 c0       	rjmp	.+40     	; 0x416 <EXTI_enuInitialize+0x2fc>
							{
							case FALLING_EDGE:
								CLEAR_BIT(MCUCSR , MCUCSR_ISC2);
     3ee:	a4 e5       	ldi	r26, 0x54	; 84
     3f0:	b0 e0       	ldi	r27, 0x00	; 0
     3f2:	e4 e5       	ldi	r30, 0x54	; 84
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	80 81       	ld	r24, Z
     3f8:	8f 7b       	andi	r24, 0xBF	; 191
     3fa:	8c 93       	st	X, r24
								Local_enuErrorState = ES_OK;
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	8a 83       	std	Y+2, r24	; 0x02
     400:	0f c0       	rjmp	.+30     	; 0x420 <EXTI_enuInitialize+0x306>
								break;
							case RISING_EDGE:
								SET_BIT(MCUCSR , MCUCSR_ISC2);
     402:	a4 e5       	ldi	r26, 0x54	; 84
     404:	b0 e0       	ldi	r27, 0x00	; 0
     406:	e4 e5       	ldi	r30, 0x54	; 84
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	80 81       	ld	r24, Z
     40c:	80 64       	ori	r24, 0x40	; 64
     40e:	8c 93       	st	X, r24
								Local_enuErrorState = ES_OK;
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	8a 83       	std	Y+2, r24	; 0x02
     414:	05 c0       	rjmp	.+10     	; 0x420 <EXTI_enuInitialize+0x306>
								break;
							default:
								Local_enuErrorState = ES_OUT_OF_RANGE;
     416:	83 e0       	ldi	r24, 0x03	; 3
     418:	8a 83       	std	Y+2, r24	; 0x02
     41a:	02 c0       	rjmp	.+4      	; 0x420 <EXTI_enuInitialize+0x306>
							}
							break;
							default:
								Local_enuErrorState = ES_OUT_OF_RANGE;
     41c:	83 e0       	ldi	r24, 0x03	; 3
     41e:	8a 83       	std	Y+2, r24	; 0x02
	u8    Local_u8Iterator = 0;

	if(Copy_pstrEXTIConfig != NULL)
	{
		/*Iterate on AstrEXTIConfig to check which interrupt pin is activated & initialize it*/
		for(Local_u8Iterator = 0 ; Local_u8Iterator < NUMBER_OF_INTERRUPT_PINS ; Local_u8Iterator++)
     420:	89 81       	ldd	r24, Y+1	; 0x01
     422:	8f 5f       	subi	r24, 0xFF	; 255
     424:	89 83       	std	Y+1, r24	; 0x01
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	83 30       	cpi	r24, 0x03	; 3
     42a:	08 f4       	brcc	.+2      	; 0x42e <EXTI_enuInitialize+0x314>
     42c:	8b ce       	rjmp	.-746    	; 0x144 <EXTI_enuInitialize+0x2a>
     42e:	02 c0       	rjmp	.+4      	; 0x434 <EXTI_enuInitialize+0x31a>

		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     430:	82 e0       	ldi	r24, 0x02	; 2
     432:	8a 83       	std	Y+2, r24	; 0x02
	}

	return   Local_enuErrorState;
     434:	8a 81       	ldd	r24, Y+2	; 0x02
}
     436:	2c 96       	adiw	r28, 0x0c	; 12
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	f8 94       	cli
     43c:	de bf       	out	0x3e, r29	; 62
     43e:	0f be       	out	0x3f, r0	; 63
     440:	cd bf       	out	0x3d, r28	; 61
     442:	cf 91       	pop	r28
     444:	df 91       	pop	r29
     446:	08 95       	ret

00000448 <EXTI_enuSetSenseMode>:
/*****************************************************************************/
/*****************************************************************************/

ES_t  EXTI_enuSetSenseMode(u8 Copy_u8EXTI_ID , u8 Copy_u8SenseLevel)

{
     448:	df 93       	push	r29
     44a:	cf 93       	push	r28
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
     450:	2b 97       	sbiw	r28, 0x0b	; 11
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	de bf       	out	0x3e, r29	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	cd bf       	out	0x3d, r28	; 61
     45c:	8a 83       	std	Y+2, r24	; 0x02
     45e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t  Local_enuErrorState = ES_NOK;
     460:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8EXTI_ID >= 0) &&(Copy_u8EXTI_ID < 3))
     462:	8a 81       	ldd	r24, Y+2	; 0x02
     464:	83 30       	cpi	r24, 0x03	; 3
     466:	08 f0       	brcs	.+2      	; 0x46a <EXTI_enuSetSenseMode+0x22>
     468:	0e c1       	rjmp	.+540    	; 0x686 <EXTI_enuSetSenseMode+0x23e>
	{
		switch(Copy_u8EXTI_ID)
     46a:	8a 81       	ldd	r24, Y+2	; 0x02
     46c:	28 2f       	mov	r18, r24
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	3b 87       	std	Y+11, r19	; 0x0b
     472:	2a 87       	std	Y+10, r18	; 0x0a
     474:	8a 85       	ldd	r24, Y+10	; 0x0a
     476:	9b 85       	ldd	r25, Y+11	; 0x0b
     478:	81 30       	cpi	r24, 0x01	; 1
     47a:	91 05       	cpc	r25, r1
     47c:	09 f4       	brne	.+2      	; 0x480 <EXTI_enuSetSenseMode+0x38>
     47e:	72 c0       	rjmp	.+228    	; 0x564 <EXTI_enuSetSenseMode+0x11c>
     480:	2a 85       	ldd	r18, Y+10	; 0x0a
     482:	3b 85       	ldd	r19, Y+11	; 0x0b
     484:	22 30       	cpi	r18, 0x02	; 2
     486:	31 05       	cpc	r19, r1
     488:	09 f4       	brne	.+2      	; 0x48c <EXTI_enuSetSenseMode+0x44>
     48a:	d3 c0       	rjmp	.+422    	; 0x632 <EXTI_enuSetSenseMode+0x1ea>
     48c:	8a 85       	ldd	r24, Y+10	; 0x0a
     48e:	9b 85       	ldd	r25, Y+11	; 0x0b
     490:	00 97       	sbiw	r24, 0x00	; 0
     492:	09 f0       	breq	.+2      	; 0x496 <EXTI_enuSetSenseMode+0x4e>
     494:	f5 c0       	rjmp	.+490    	; 0x680 <EXTI_enuSetSenseMode+0x238>
		{
		case 0:

			/*Choosing Interrupt Sense Control for INT0*/
			switch(Copy_u8SenseLevel)
     496:	8b 81       	ldd	r24, Y+3	; 0x03
     498:	28 2f       	mov	r18, r24
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	39 87       	std	Y+9, r19	; 0x09
     49e:	28 87       	std	Y+8, r18	; 0x08
     4a0:	88 85       	ldd	r24, Y+8	; 0x08
     4a2:	99 85       	ldd	r25, Y+9	; 0x09
     4a4:	87 30       	cpi	r24, 0x07	; 7
     4a6:	91 05       	cpc	r25, r1
     4a8:	39 f1       	breq	.+78     	; 0x4f8 <EXTI_enuSetSenseMode+0xb0>
     4aa:	28 85       	ldd	r18, Y+8	; 0x08
     4ac:	39 85       	ldd	r19, Y+9	; 0x09
     4ae:	28 30       	cpi	r18, 0x08	; 8
     4b0:	31 05       	cpc	r19, r1
     4b2:	34 f4       	brge	.+12     	; 0x4c0 <EXTI_enuSetSenseMode+0x78>
     4b4:	88 85       	ldd	r24, Y+8	; 0x08
     4b6:	99 85       	ldd	r25, Y+9	; 0x09
     4b8:	86 30       	cpi	r24, 0x06	; 6
     4ba:	91 05       	cpc	r25, r1
     4bc:	61 f0       	breq	.+24     	; 0x4d6 <EXTI_enuSetSenseMode+0x8e>
     4be:	4f c0       	rjmp	.+158    	; 0x55e <EXTI_enuSetSenseMode+0x116>
     4c0:	28 85       	ldd	r18, Y+8	; 0x08
     4c2:	39 85       	ldd	r19, Y+9	; 0x09
     4c4:	28 30       	cpi	r18, 0x08	; 8
     4c6:	31 05       	cpc	r19, r1
     4c8:	c9 f1       	breq	.+114    	; 0x53c <EXTI_enuSetSenseMode+0xf4>
     4ca:	88 85       	ldd	r24, Y+8	; 0x08
     4cc:	99 85       	ldd	r25, Y+9	; 0x09
     4ce:	89 30       	cpi	r24, 0x09	; 9
     4d0:	91 05       	cpc	r25, r1
     4d2:	19 f1       	breq	.+70     	; 0x51a <EXTI_enuSetSenseMode+0xd2>
     4d4:	44 c0       	rjmp	.+136    	; 0x55e <EXTI_enuSetSenseMode+0x116>
			{
			case FALLING_EDGE:
				SET_BIT(MCUCR , MCUCR_ISC01);
     4d6:	a5 e5       	ldi	r26, 0x55	; 85
     4d8:	b0 e0       	ldi	r27, 0x00	; 0
     4da:	e5 e5       	ldi	r30, 0x55	; 85
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	80 81       	ld	r24, Z
     4e0:	82 60       	ori	r24, 0x02	; 2
     4e2:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR , MCUCR_ISC00);
     4e4:	a5 e5       	ldi	r26, 0x55	; 85
     4e6:	b0 e0       	ldi	r27, 0x00	; 0
     4e8:	e5 e5       	ldi	r30, 0x55	; 85
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	80 81       	ld	r24, Z
     4ee:	8e 7f       	andi	r24, 0xFE	; 254
     4f0:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	89 83       	std	Y+1, r24	; 0x01
     4f6:	c9 c0       	rjmp	.+402    	; 0x68a <EXTI_enuSetSenseMode+0x242>
				break;
			case RISING_EDGE:
				SET_BIT(MCUCR , MCUCR_ISC01);
     4f8:	a5 e5       	ldi	r26, 0x55	; 85
     4fa:	b0 e0       	ldi	r27, 0x00	; 0
     4fc:	e5 e5       	ldi	r30, 0x55	; 85
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	80 81       	ld	r24, Z
     502:	82 60       	ori	r24, 0x02	; 2
     504:	8c 93       	st	X, r24
				SET_BIT(MCUCR , MCUCR_ISC00);
     506:	a5 e5       	ldi	r26, 0x55	; 85
     508:	b0 e0       	ldi	r27, 0x00	; 0
     50a:	e5 e5       	ldi	r30, 0x55	; 85
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	80 81       	ld	r24, Z
     510:	81 60       	ori	r24, 0x01	; 1
     512:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	89 83       	std	Y+1, r24	; 0x01
     518:	b8 c0       	rjmp	.+368    	; 0x68a <EXTI_enuSetSenseMode+0x242>
				break;
			case ANY_LOGICAL_CHANGE:
				CLEAR_BIT(MCUCR , MCUCR_ISC01);
     51a:	a5 e5       	ldi	r26, 0x55	; 85
     51c:	b0 e0       	ldi	r27, 0x00	; 0
     51e:	e5 e5       	ldi	r30, 0x55	; 85
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	80 81       	ld	r24, Z
     524:	8d 7f       	andi	r24, 0xFD	; 253
     526:	8c 93       	st	X, r24
				SET_BIT(MCUCR , MCUCR_ISC00);
     528:	a5 e5       	ldi	r26, 0x55	; 85
     52a:	b0 e0       	ldi	r27, 0x00	; 0
     52c:	e5 e5       	ldi	r30, 0x55	; 85
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	80 81       	ld	r24, Z
     532:	81 60       	ori	r24, 0x01	; 1
     534:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	89 83       	std	Y+1, r24	; 0x01
     53a:	a7 c0       	rjmp	.+334    	; 0x68a <EXTI_enuSetSenseMode+0x242>
				break;
			case LOW_LEVEL:
				CLEAR_BIT(MCUCR , MCUCR_ISC01);
     53c:	a5 e5       	ldi	r26, 0x55	; 85
     53e:	b0 e0       	ldi	r27, 0x00	; 0
     540:	e5 e5       	ldi	r30, 0x55	; 85
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	80 81       	ld	r24, Z
     546:	8d 7f       	andi	r24, 0xFD	; 253
     548:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR , MCUCR_ISC00);
     54a:	a5 e5       	ldi	r26, 0x55	; 85
     54c:	b0 e0       	ldi	r27, 0x00	; 0
     54e:	e5 e5       	ldi	r30, 0x55	; 85
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	80 81       	ld	r24, Z
     554:	8e 7f       	andi	r24, 0xFE	; 254
     556:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	89 83       	std	Y+1, r24	; 0x01
     55c:	96 c0       	rjmp	.+300    	; 0x68a <EXTI_enuSetSenseMode+0x242>
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
     55e:	83 e0       	ldi	r24, 0x03	; 3
     560:	89 83       	std	Y+1, r24	; 0x01
     562:	93 c0       	rjmp	.+294    	; 0x68a <EXTI_enuSetSenseMode+0x242>
			}
			break;
			case 1:

				/*Choosing Interrupt Sense Control for INT1*/
				switch(Copy_u8SenseLevel)
     564:	8b 81       	ldd	r24, Y+3	; 0x03
     566:	28 2f       	mov	r18, r24
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	3f 83       	std	Y+7, r19	; 0x07
     56c:	2e 83       	std	Y+6, r18	; 0x06
     56e:	8e 81       	ldd	r24, Y+6	; 0x06
     570:	9f 81       	ldd	r25, Y+7	; 0x07
     572:	87 30       	cpi	r24, 0x07	; 7
     574:	91 05       	cpc	r25, r1
     576:	39 f1       	breq	.+78     	; 0x5c6 <EXTI_enuSetSenseMode+0x17e>
     578:	2e 81       	ldd	r18, Y+6	; 0x06
     57a:	3f 81       	ldd	r19, Y+7	; 0x07
     57c:	28 30       	cpi	r18, 0x08	; 8
     57e:	31 05       	cpc	r19, r1
     580:	34 f4       	brge	.+12     	; 0x58e <EXTI_enuSetSenseMode+0x146>
     582:	8e 81       	ldd	r24, Y+6	; 0x06
     584:	9f 81       	ldd	r25, Y+7	; 0x07
     586:	86 30       	cpi	r24, 0x06	; 6
     588:	91 05       	cpc	r25, r1
     58a:	61 f0       	breq	.+24     	; 0x5a4 <EXTI_enuSetSenseMode+0x15c>
     58c:	4f c0       	rjmp	.+158    	; 0x62c <EXTI_enuSetSenseMode+0x1e4>
     58e:	2e 81       	ldd	r18, Y+6	; 0x06
     590:	3f 81       	ldd	r19, Y+7	; 0x07
     592:	28 30       	cpi	r18, 0x08	; 8
     594:	31 05       	cpc	r19, r1
     596:	c9 f1       	breq	.+114    	; 0x60a <EXTI_enuSetSenseMode+0x1c2>
     598:	8e 81       	ldd	r24, Y+6	; 0x06
     59a:	9f 81       	ldd	r25, Y+7	; 0x07
     59c:	89 30       	cpi	r24, 0x09	; 9
     59e:	91 05       	cpc	r25, r1
     5a0:	19 f1       	breq	.+70     	; 0x5e8 <EXTI_enuSetSenseMode+0x1a0>
     5a2:	44 c0       	rjmp	.+136    	; 0x62c <EXTI_enuSetSenseMode+0x1e4>
				{
				case FALLING_EDGE:
					SET_BIT(MCUCR , MCUCR_ISC11);
     5a4:	a5 e5       	ldi	r26, 0x55	; 85
     5a6:	b0 e0       	ldi	r27, 0x00	; 0
     5a8:	e5 e5       	ldi	r30, 0x55	; 85
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	80 81       	ld	r24, Z
     5ae:	88 60       	ori	r24, 0x08	; 8
     5b0:	8c 93       	st	X, r24
					CLEAR_BIT(MCUCR , MCUCR_ISC10);
     5b2:	a5 e5       	ldi	r26, 0x55	; 85
     5b4:	b0 e0       	ldi	r27, 0x00	; 0
     5b6:	e5 e5       	ldi	r30, 0x55	; 85
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	80 81       	ld	r24, Z
     5bc:	8b 7f       	andi	r24, 0xFB	; 251
     5be:	8c 93       	st	X, r24
					Local_enuErrorState = ES_OK;
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	89 83       	std	Y+1, r24	; 0x01
     5c4:	62 c0       	rjmp	.+196    	; 0x68a <EXTI_enuSetSenseMode+0x242>
					break;
				case RISING_EDGE:
					SET_BIT(MCUCR , MCUCR_ISC11);
     5c6:	a5 e5       	ldi	r26, 0x55	; 85
     5c8:	b0 e0       	ldi	r27, 0x00	; 0
     5ca:	e5 e5       	ldi	r30, 0x55	; 85
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	80 81       	ld	r24, Z
     5d0:	88 60       	ori	r24, 0x08	; 8
     5d2:	8c 93       	st	X, r24
					SET_BIT(MCUCR , MCUCR_ISC10);
     5d4:	a5 e5       	ldi	r26, 0x55	; 85
     5d6:	b0 e0       	ldi	r27, 0x00	; 0
     5d8:	e5 e5       	ldi	r30, 0x55	; 85
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	84 60       	ori	r24, 0x04	; 4
     5e0:	8c 93       	st	X, r24
					Local_enuErrorState = ES_OK;
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	89 83       	std	Y+1, r24	; 0x01
     5e6:	51 c0       	rjmp	.+162    	; 0x68a <EXTI_enuSetSenseMode+0x242>
					break;
				case ANY_LOGICAL_CHANGE:
					CLEAR_BIT(MCUCR , MCUCR_ISC11);
     5e8:	a5 e5       	ldi	r26, 0x55	; 85
     5ea:	b0 e0       	ldi	r27, 0x00	; 0
     5ec:	e5 e5       	ldi	r30, 0x55	; 85
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	80 81       	ld	r24, Z
     5f2:	87 7f       	andi	r24, 0xF7	; 247
     5f4:	8c 93       	st	X, r24
					SET_BIT(MCUCR , MCUCR_ISC10);
     5f6:	a5 e5       	ldi	r26, 0x55	; 85
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	e5 e5       	ldi	r30, 0x55	; 85
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	80 81       	ld	r24, Z
     600:	84 60       	ori	r24, 0x04	; 4
     602:	8c 93       	st	X, r24
					Local_enuErrorState = ES_OK;
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	89 83       	std	Y+1, r24	; 0x01
     608:	40 c0       	rjmp	.+128    	; 0x68a <EXTI_enuSetSenseMode+0x242>
					break;
				case LOW_LEVEL:
					CLEAR_BIT(MCUCR , MCUCR_ISC11);
     60a:	a5 e5       	ldi	r26, 0x55	; 85
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e5 e5       	ldi	r30, 0x55	; 85
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	80 81       	ld	r24, Z
     614:	87 7f       	andi	r24, 0xF7	; 247
     616:	8c 93       	st	X, r24
					CLEAR_BIT(MCUCR , MCUCR_ISC10);
     618:	a5 e5       	ldi	r26, 0x55	; 85
     61a:	b0 e0       	ldi	r27, 0x00	; 0
     61c:	e5 e5       	ldi	r30, 0x55	; 85
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	80 81       	ld	r24, Z
     622:	8b 7f       	andi	r24, 0xFB	; 251
     624:	8c 93       	st	X, r24
					Local_enuErrorState = ES_OK;
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	89 83       	std	Y+1, r24	; 0x01
     62a:	2f c0       	rjmp	.+94     	; 0x68a <EXTI_enuSetSenseMode+0x242>
					break;
				default:
					Local_enuErrorState = ES_OUT_OF_RANGE;
     62c:	83 e0       	ldi	r24, 0x03	; 3
     62e:	89 83       	std	Y+1, r24	; 0x01
     630:	2c c0       	rjmp	.+88     	; 0x68a <EXTI_enuSetSenseMode+0x242>
				}
				break;
				case 2:

					/*Choosing Interrupt Sense Control for INT2*/
					switch(Copy_u8SenseLevel)
     632:	8b 81       	ldd	r24, Y+3	; 0x03
     634:	28 2f       	mov	r18, r24
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	3d 83       	std	Y+5, r19	; 0x05
     63a:	2c 83       	std	Y+4, r18	; 0x04
     63c:	8c 81       	ldd	r24, Y+4	; 0x04
     63e:	9d 81       	ldd	r25, Y+5	; 0x05
     640:	86 30       	cpi	r24, 0x06	; 6
     642:	91 05       	cpc	r25, r1
     644:	31 f0       	breq	.+12     	; 0x652 <EXTI_enuSetSenseMode+0x20a>
     646:	2c 81       	ldd	r18, Y+4	; 0x04
     648:	3d 81       	ldd	r19, Y+5	; 0x05
     64a:	27 30       	cpi	r18, 0x07	; 7
     64c:	31 05       	cpc	r19, r1
     64e:	59 f0       	breq	.+22     	; 0x666 <EXTI_enuSetSenseMode+0x21e>
     650:	14 c0       	rjmp	.+40     	; 0x67a <EXTI_enuSetSenseMode+0x232>
					{
					case FALLING_EDGE:
						CLEAR_BIT(MCUCSR , MCUCSR_ISC2);
     652:	a4 e5       	ldi	r26, 0x54	; 84
     654:	b0 e0       	ldi	r27, 0x00	; 0
     656:	e4 e5       	ldi	r30, 0x54	; 84
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	80 81       	ld	r24, Z
     65c:	8f 7b       	andi	r24, 0xBF	; 191
     65e:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	89 83       	std	Y+1, r24	; 0x01
     664:	12 c0       	rjmp	.+36     	; 0x68a <EXTI_enuSetSenseMode+0x242>
						break;
					case RISING_EDGE:
						SET_BIT(MCUCSR , MCUCSR_ISC2);
     666:	a4 e5       	ldi	r26, 0x54	; 84
     668:	b0 e0       	ldi	r27, 0x00	; 0
     66a:	e4 e5       	ldi	r30, 0x54	; 84
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	80 81       	ld	r24, Z
     670:	80 64       	ori	r24, 0x40	; 64
     672:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	89 83       	std	Y+1, r24	; 0x01
     678:	08 c0       	rjmp	.+16     	; 0x68a <EXTI_enuSetSenseMode+0x242>
						break;
					default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
     67a:	83 e0       	ldi	r24, 0x03	; 3
     67c:	89 83       	std	Y+1, r24	; 0x01
     67e:	05 c0       	rjmp	.+10     	; 0x68a <EXTI_enuSetSenseMode+0x242>

					}
					break;
					default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
     680:	83 e0       	ldi	r24, 0x03	; 3
     682:	89 83       	std	Y+1, r24	; 0x01
     684:	02 c0       	rjmp	.+4      	; 0x68a <EXTI_enuSetSenseMode+0x242>
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     686:	83 e0       	ldi	r24, 0x03	; 3
     688:	89 83       	std	Y+1, r24	; 0x01
	}

	return   Local_enuErrorState;
     68a:	89 81       	ldd	r24, Y+1	; 0x01
}
     68c:	2b 96       	adiw	r28, 0x0b	; 11
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	f8 94       	cli
     692:	de bf       	out	0x3e, r29	; 62
     694:	0f be       	out	0x3f, r0	; 63
     696:	cd bf       	out	0x3d, r28	; 61
     698:	cf 91       	pop	r28
     69a:	df 91       	pop	r29
     69c:	08 95       	ret

0000069e <EXTI_enuEnableInterrupt>:
/** Functionality   : Disable Interrupt EXTI                                **/
/*****************************************************************************/
/*****************************************************************************/

ES_t  EXTI_enuEnableInterrupt(u8 Copy_u8EXTI_ID)
{
     69e:	df 93       	push	r29
     6a0:	cf 93       	push	r28
     6a2:	00 d0       	rcall	.+0      	; 0x6a4 <EXTI_enuEnableInterrupt+0x6>
     6a4:	00 d0       	rcall	.+0      	; 0x6a6 <EXTI_enuEnableInterrupt+0x8>
     6a6:	cd b7       	in	r28, 0x3d	; 61
     6a8:	de b7       	in	r29, 0x3e	; 62
     6aa:	8a 83       	std	Y+2, r24	; 0x02
	ES_t  Local_enuErrorState = ES_NOK;
     6ac:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8EXTI_ID >= 0) &&(Copy_u8EXTI_ID < 3))
     6ae:	8a 81       	ldd	r24, Y+2	; 0x02
     6b0:	83 30       	cpi	r24, 0x03	; 3
     6b2:	a0 f5       	brcc	.+104    	; 0x71c <EXTI_enuEnableInterrupt+0x7e>
	{
		switch(Copy_u8EXTI_ID)
     6b4:	8a 81       	ldd	r24, Y+2	; 0x02
     6b6:	28 2f       	mov	r18, r24
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	3c 83       	std	Y+4, r19	; 0x04
     6bc:	2b 83       	std	Y+3, r18	; 0x03
     6be:	8b 81       	ldd	r24, Y+3	; 0x03
     6c0:	9c 81       	ldd	r25, Y+4	; 0x04
     6c2:	81 30       	cpi	r24, 0x01	; 1
     6c4:	91 05       	cpc	r25, r1
     6c6:	99 f0       	breq	.+38     	; 0x6ee <EXTI_enuEnableInterrupt+0x50>
     6c8:	2b 81       	ldd	r18, Y+3	; 0x03
     6ca:	3c 81       	ldd	r19, Y+4	; 0x04
     6cc:	22 30       	cpi	r18, 0x02	; 2
     6ce:	31 05       	cpc	r19, r1
     6d0:	c1 f0       	breq	.+48     	; 0x702 <EXTI_enuEnableInterrupt+0x64>
     6d2:	8b 81       	ldd	r24, Y+3	; 0x03
     6d4:	9c 81       	ldd	r25, Y+4	; 0x04
     6d6:	00 97       	sbiw	r24, 0x00	; 0
     6d8:	f1 f4       	brne	.+60     	; 0x716 <EXTI_enuEnableInterrupt+0x78>
		{
		case 0:
			/*Enable PIE For INT0*/
			SET_BIT(GICR , GICR_INT0);
     6da:	ab e5       	ldi	r26, 0x5B	; 91
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
     6de:	eb e5       	ldi	r30, 0x5B	; 91
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	80 81       	ld	r24, Z
     6e4:	80 64       	ori	r24, 0x40	; 64
     6e6:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	89 83       	std	Y+1, r24	; 0x01
     6ec:	19 c0       	rjmp	.+50     	; 0x720 <EXTI_enuEnableInterrupt+0x82>
			break;
		case 1:
			/*Enable PIE For INT1*/
			SET_BIT(GICR , GICR_INT1);
     6ee:	ab e5       	ldi	r26, 0x5B	; 91
     6f0:	b0 e0       	ldi	r27, 0x00	; 0
     6f2:	eb e5       	ldi	r30, 0x5B	; 91
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	80 81       	ld	r24, Z
     6f8:	80 68       	ori	r24, 0x80	; 128
     6fa:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	89 83       	std	Y+1, r24	; 0x01
     700:	0f c0       	rjmp	.+30     	; 0x720 <EXTI_enuEnableInterrupt+0x82>
			break;
		case 2:
			/*Enable PIE For INT2*/
			SET_BIT(GICR , GICR_INT2);
     702:	ab e5       	ldi	r26, 0x5B	; 91
     704:	b0 e0       	ldi	r27, 0x00	; 0
     706:	eb e5       	ldi	r30, 0x5B	; 91
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	80 81       	ld	r24, Z
     70c:	80 62       	ori	r24, 0x20	; 32
     70e:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	89 83       	std	Y+1, r24	; 0x01
     714:	05 c0       	rjmp	.+10     	; 0x720 <EXTI_enuEnableInterrupt+0x82>

			break;
		default:
			Local_enuErrorState = ES_OUT_OF_RANGE;
     716:	83 e0       	ldi	r24, 0x03	; 3
     718:	89 83       	std	Y+1, r24	; 0x01
     71a:	02 c0       	rjmp	.+4      	; 0x720 <EXTI_enuEnableInterrupt+0x82>
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     71c:	83 e0       	ldi	r24, 0x03	; 3
     71e:	89 83       	std	Y+1, r24	; 0x01
	}

	return   Local_enuErrorState;
     720:	89 81       	ldd	r24, Y+1	; 0x01
}
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	cf 91       	pop	r28
     72c:	df 91       	pop	r29
     72e:	08 95       	ret

00000730 <EXTI_enuDisableInterrupt>:
/** Functionality   : Disable Interrupt EXTI                                **/
/*****************************************************************************/
/*****************************************************************************/

ES_t  EXTI_enuDisableInterrupt(u8 Copy_u8EXTI_ID)
{
     730:	df 93       	push	r29
     732:	cf 93       	push	r28
     734:	00 d0       	rcall	.+0      	; 0x736 <EXTI_enuDisableInterrupt+0x6>
     736:	00 d0       	rcall	.+0      	; 0x738 <EXTI_enuDisableInterrupt+0x8>
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t  Local_enuErrorState = ES_NOK;
     73e:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8EXTI_ID >= 0) &&(Copy_u8EXTI_ID < 3))
     740:	8a 81       	ldd	r24, Y+2	; 0x02
     742:	83 30       	cpi	r24, 0x03	; 3
     744:	a0 f5       	brcc	.+104    	; 0x7ae <EXTI_enuDisableInterrupt+0x7e>
	{
		switch(Copy_u8EXTI_ID)
     746:	8a 81       	ldd	r24, Y+2	; 0x02
     748:	28 2f       	mov	r18, r24
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	3c 83       	std	Y+4, r19	; 0x04
     74e:	2b 83       	std	Y+3, r18	; 0x03
     750:	8b 81       	ldd	r24, Y+3	; 0x03
     752:	9c 81       	ldd	r25, Y+4	; 0x04
     754:	81 30       	cpi	r24, 0x01	; 1
     756:	91 05       	cpc	r25, r1
     758:	99 f0       	breq	.+38     	; 0x780 <EXTI_enuDisableInterrupt+0x50>
     75a:	2b 81       	ldd	r18, Y+3	; 0x03
     75c:	3c 81       	ldd	r19, Y+4	; 0x04
     75e:	22 30       	cpi	r18, 0x02	; 2
     760:	31 05       	cpc	r19, r1
     762:	c1 f0       	breq	.+48     	; 0x794 <EXTI_enuDisableInterrupt+0x64>
     764:	8b 81       	ldd	r24, Y+3	; 0x03
     766:	9c 81       	ldd	r25, Y+4	; 0x04
     768:	00 97       	sbiw	r24, 0x00	; 0
     76a:	f1 f4       	brne	.+60     	; 0x7a8 <EXTI_enuDisableInterrupt+0x78>
		{
		case 0:
			/*Disable PIE For INT0*/
			CLEAR_BIT(GICR , GICR_INT0);
     76c:	ab e5       	ldi	r26, 0x5B	; 91
     76e:	b0 e0       	ldi	r27, 0x00	; 0
     770:	eb e5       	ldi	r30, 0x5B	; 91
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	80 81       	ld	r24, Z
     776:	8f 7b       	andi	r24, 0xBF	; 191
     778:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	89 83       	std	Y+1, r24	; 0x01
     77e:	19 c0       	rjmp	.+50     	; 0x7b2 <EXTI_enuDisableInterrupt+0x82>
			break;
		case 1:
			/*Disable PIE For INT1*/
			CLEAR_BIT(GICR , GICR_INT1);
     780:	ab e5       	ldi	r26, 0x5B	; 91
     782:	b0 e0       	ldi	r27, 0x00	; 0
     784:	eb e5       	ldi	r30, 0x5B	; 91
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	80 81       	ld	r24, Z
     78a:	8f 77       	andi	r24, 0x7F	; 127
     78c:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	89 83       	std	Y+1, r24	; 0x01
     792:	0f c0       	rjmp	.+30     	; 0x7b2 <EXTI_enuDisableInterrupt+0x82>
			break;
		case 2:
			/*Disable PIE For INT2*/
			CLEAR_BIT(GICR , GICR_INT2);
     794:	ab e5       	ldi	r26, 0x5B	; 91
     796:	b0 e0       	ldi	r27, 0x00	; 0
     798:	eb e5       	ldi	r30, 0x5B	; 91
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	80 81       	ld	r24, Z
     79e:	8f 7d       	andi	r24, 0xDF	; 223
     7a0:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	89 83       	std	Y+1, r24	; 0x01
     7a6:	05 c0       	rjmp	.+10     	; 0x7b2 <EXTI_enuDisableInterrupt+0x82>

			break;
		default:
			Local_enuErrorState = ES_OUT_OF_RANGE;
     7a8:	83 e0       	ldi	r24, 0x03	; 3
     7aa:	89 83       	std	Y+1, r24	; 0x01
     7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <EXTI_enuDisableInterrupt+0x82>
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     7ae:	83 e0       	ldi	r24, 0x03	; 3
     7b0:	89 83       	std	Y+1, r24	; 0x01
	}

	return   Local_enuErrorState;
     7b2:	89 81       	ldd	r24, Y+1	; 0x01
}
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	cf 91       	pop	r28
     7be:	df 91       	pop	r29
     7c0:	08 95       	ret

000007c2 <EXTI_enuCallBack>:

ES_t  EXTI_enuCallBack(volatile void(*Copy_pFunAPPFun)(void*) ,volatile void * Copy_pvidParameter , u8  Copy_u8EXTI_ID)
{
     7c2:	df 93       	push	r29
     7c4:	cf 93       	push	r28
     7c6:	00 d0       	rcall	.+0      	; 0x7c8 <EXTI_enuCallBack+0x6>
     7c8:	00 d0       	rcall	.+0      	; 0x7ca <EXTI_enuCallBack+0x8>
     7ca:	00 d0       	rcall	.+0      	; 0x7cc <EXTI_enuCallBack+0xa>
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
     7d0:	9b 83       	std	Y+3, r25	; 0x03
     7d2:	8a 83       	std	Y+2, r24	; 0x02
     7d4:	7d 83       	std	Y+5, r23	; 0x05
     7d6:	6c 83       	std	Y+4, r22	; 0x04
     7d8:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
     7da:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pFunAPPFun != NULL && Copy_u8EXTI_ID >= 0 && Copy_u8EXTI_ID < 3)
     7dc:	8a 81       	ldd	r24, Y+2	; 0x02
     7de:	9b 81       	ldd	r25, Y+3	; 0x03
     7e0:	00 97       	sbiw	r24, 0x00	; 0
     7e2:	e9 f0       	breq	.+58     	; 0x81e <EXTI_enuCallBack+0x5c>
     7e4:	8e 81       	ldd	r24, Y+6	; 0x06
     7e6:	83 30       	cpi	r24, 0x03	; 3
     7e8:	d0 f4       	brcc	.+52     	; 0x81e <EXTI_enuCallBack+0x5c>
	{
		EXTI_ApFunINTFun[Copy_u8EXTI_ID] = Copy_pFunAPPFun;
     7ea:	8e 81       	ldd	r24, Y+6	; 0x06
     7ec:	88 2f       	mov	r24, r24
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	fc 01       	movw	r30, r24
     7f6:	ea 59       	subi	r30, 0x9A	; 154
     7f8:	ff 4f       	sbci	r31, 0xFF	; 255
     7fa:	8a 81       	ldd	r24, Y+2	; 0x02
     7fc:	9b 81       	ldd	r25, Y+3	; 0x03
     7fe:	91 83       	std	Z+1, r25	; 0x01
     800:	80 83       	st	Z, r24
		EXTI_ApvidGenericParameter[Copy_u8EXTI_ID] = Copy_pvidParameter;
     802:	8e 81       	ldd	r24, Y+6	; 0x06
     804:	88 2f       	mov	r24, r24
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	88 0f       	add	r24, r24
     80a:	99 1f       	adc	r25, r25
     80c:	fc 01       	movw	r30, r24
     80e:	e4 59       	subi	r30, 0x94	; 148
     810:	ff 4f       	sbci	r31, 0xFF	; 255
     812:	8c 81       	ldd	r24, Y+4	; 0x04
     814:	9d 81       	ldd	r25, Y+5	; 0x05
     816:	91 83       	std	Z+1, r25	; 0x01
     818:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	89 83       	std	Y+1, r24	; 0x01
	}

	return  Local_enuErrorState;
     81e:	89 81       	ldd	r24, Y+1	; 0x01
}
     820:	26 96       	adiw	r28, 0x06	; 6
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	f8 94       	cli
     826:	de bf       	out	0x3e, r29	; 62
     828:	0f be       	out	0x3f, r0	; 63
     82a:	cd bf       	out	0x3d, r28	; 61
     82c:	cf 91       	pop	r28
     82e:	df 91       	pop	r29
     830:	08 95       	ret

00000832 <__vector_1>:


/*ISR Function For Interrupt 0*/
ISR(VECT_INT0)
{
     832:	1f 92       	push	r1
     834:	0f 92       	push	r0
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	0f 92       	push	r0
     83a:	11 24       	eor	r1, r1
     83c:	2f 93       	push	r18
     83e:	3f 93       	push	r19
     840:	4f 93       	push	r20
     842:	5f 93       	push	r21
     844:	6f 93       	push	r22
     846:	7f 93       	push	r23
     848:	8f 93       	push	r24
     84a:	9f 93       	push	r25
     84c:	af 93       	push	r26
     84e:	bf 93       	push	r27
     850:	ef 93       	push	r30
     852:	ff 93       	push	r31
     854:	df 93       	push	r29
     856:	cf 93       	push	r28
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApFunINTFun[0] != NULL)
     85c:	80 91 66 00 	lds	r24, 0x0066
     860:	90 91 67 00 	lds	r25, 0x0067
     864:	00 97       	sbiw	r24, 0x00	; 0
     866:	49 f0       	breq	.+18     	; 0x87a <__stack+0x1b>
	{
		EXTI_ApFunINTFun[0] (EXTI_ApvidGenericParameter[0]);
     868:	e0 91 66 00 	lds	r30, 0x0066
     86c:	f0 91 67 00 	lds	r31, 0x0067
     870:	80 91 6c 00 	lds	r24, 0x006C
     874:	90 91 6d 00 	lds	r25, 0x006D
     878:	09 95       	icall
	}

}
     87a:	cf 91       	pop	r28
     87c:	df 91       	pop	r29
     87e:	ff 91       	pop	r31
     880:	ef 91       	pop	r30
     882:	bf 91       	pop	r27
     884:	af 91       	pop	r26
     886:	9f 91       	pop	r25
     888:	8f 91       	pop	r24
     88a:	7f 91       	pop	r23
     88c:	6f 91       	pop	r22
     88e:	5f 91       	pop	r21
     890:	4f 91       	pop	r20
     892:	3f 91       	pop	r19
     894:	2f 91       	pop	r18
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	0f 90       	pop	r0
     89c:	1f 90       	pop	r1
     89e:	18 95       	reti

000008a0 <__vector_2>:

/*ISR Function For Interrupt 1*/
ISR(VECT_INT1)
{
     8a0:	1f 92       	push	r1
     8a2:	0f 92       	push	r0
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	0f 92       	push	r0
     8a8:	11 24       	eor	r1, r1
     8aa:	2f 93       	push	r18
     8ac:	3f 93       	push	r19
     8ae:	4f 93       	push	r20
     8b0:	5f 93       	push	r21
     8b2:	6f 93       	push	r22
     8b4:	7f 93       	push	r23
     8b6:	8f 93       	push	r24
     8b8:	9f 93       	push	r25
     8ba:	af 93       	push	r26
     8bc:	bf 93       	push	r27
     8be:	ef 93       	push	r30
     8c0:	ff 93       	push	r31
     8c2:	df 93       	push	r29
     8c4:	cf 93       	push	r28
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApFunINTFun[1] != NULL)
     8ca:	80 91 68 00 	lds	r24, 0x0068
     8ce:	90 91 69 00 	lds	r25, 0x0069
     8d2:	00 97       	sbiw	r24, 0x00	; 0
     8d4:	49 f0       	breq	.+18     	; 0x8e8 <__vector_2+0x48>
	{
		EXTI_ApFunINTFun[1](EXTI_ApvidGenericParameter[1]);
     8d6:	e0 91 68 00 	lds	r30, 0x0068
     8da:	f0 91 69 00 	lds	r31, 0x0069
     8de:	80 91 6e 00 	lds	r24, 0x006E
     8e2:	90 91 6f 00 	lds	r25, 0x006F
     8e6:	09 95       	icall
	}
}
     8e8:	cf 91       	pop	r28
     8ea:	df 91       	pop	r29
     8ec:	ff 91       	pop	r31
     8ee:	ef 91       	pop	r30
     8f0:	bf 91       	pop	r27
     8f2:	af 91       	pop	r26
     8f4:	9f 91       	pop	r25
     8f6:	8f 91       	pop	r24
     8f8:	7f 91       	pop	r23
     8fa:	6f 91       	pop	r22
     8fc:	5f 91       	pop	r21
     8fe:	4f 91       	pop	r20
     900:	3f 91       	pop	r19
     902:	2f 91       	pop	r18
     904:	0f 90       	pop	r0
     906:	0f be       	out	0x3f, r0	; 63
     908:	0f 90       	pop	r0
     90a:	1f 90       	pop	r1
     90c:	18 95       	reti

0000090e <__vector_3>:

/*ISR Function For Interrupt 2*/
ISR(VECT_INT2)
{
     90e:	1f 92       	push	r1
     910:	0f 92       	push	r0
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	0f 92       	push	r0
     916:	11 24       	eor	r1, r1
     918:	2f 93       	push	r18
     91a:	3f 93       	push	r19
     91c:	4f 93       	push	r20
     91e:	5f 93       	push	r21
     920:	6f 93       	push	r22
     922:	7f 93       	push	r23
     924:	8f 93       	push	r24
     926:	9f 93       	push	r25
     928:	af 93       	push	r26
     92a:	bf 93       	push	r27
     92c:	ef 93       	push	r30
     92e:	ff 93       	push	r31
     930:	df 93       	push	r29
     932:	cf 93       	push	r28
     934:	cd b7       	in	r28, 0x3d	; 61
     936:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApFunINTFun[2] != NULL)
     938:	80 91 6a 00 	lds	r24, 0x006A
     93c:	90 91 6b 00 	lds	r25, 0x006B
     940:	00 97       	sbiw	r24, 0x00	; 0
     942:	49 f0       	breq	.+18     	; 0x956 <__vector_3+0x48>
	{
		EXTI_ApFunINTFun[2](EXTI_ApvidGenericParameter[2]);
     944:	e0 91 6a 00 	lds	r30, 0x006A
     948:	f0 91 6b 00 	lds	r31, 0x006B
     94c:	80 91 70 00 	lds	r24, 0x0070
     950:	90 91 71 00 	lds	r25, 0x0071
     954:	09 95       	icall
	}

}
     956:	cf 91       	pop	r28
     958:	df 91       	pop	r29
     95a:	ff 91       	pop	r31
     95c:	ef 91       	pop	r30
     95e:	bf 91       	pop	r27
     960:	af 91       	pop	r26
     962:	9f 91       	pop	r25
     964:	8f 91       	pop	r24
     966:	7f 91       	pop	r23
     968:	6f 91       	pop	r22
     96a:	5f 91       	pop	r21
     96c:	4f 91       	pop	r20
     96e:	3f 91       	pop	r19
     970:	2f 91       	pop	r18
     972:	0f 90       	pop	r0
     974:	0f be       	out	0x3f, r0	; 63
     976:	0f 90       	pop	r0
     978:	1f 90       	pop	r1
     97a:	18 95       	reti

0000097c <DIO_enuSetPortValue>:
/** Arguments       : Port & Value.                                         **/
/** Functionality   : Setting Port Value                                    **/
/*****************************************************************************/
/*****************************************************************************/
ES_t DIO_enuSetPortValue(u8 copy_u8Port , u8 copy_u8Value)
{
     97c:	df 93       	push	r29
     97e:	cf 93       	push	r28
     980:	00 d0       	rcall	.+0      	; 0x982 <DIO_enuSetPortValue+0x6>
     982:	00 d0       	rcall	.+0      	; 0x984 <DIO_enuSetPortValue+0x8>
     984:	0f 92       	push	r0
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
     98a:	8a 83       	std	Y+2, r24	; 0x02
     98c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_u8ErrorState = ES_NOK;
     98e:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8Port <= DIO_u8PORTD)
     990:	8a 81       	ldd	r24, Y+2	; 0x02
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	a8 f5       	brcc	.+106    	; 0xa00 <DIO_enuSetPortValue+0x84>
	{
		switch(copy_u8Port)
     996:	8a 81       	ldd	r24, Y+2	; 0x02
     998:	28 2f       	mov	r18, r24
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	3d 83       	std	Y+5, r19	; 0x05
     99e:	2c 83       	std	Y+4, r18	; 0x04
     9a0:	8c 81       	ldd	r24, Y+4	; 0x04
     9a2:	9d 81       	ldd	r25, Y+5	; 0x05
     9a4:	81 30       	cpi	r24, 0x01	; 1
     9a6:	91 05       	cpc	r25, r1
     9a8:	d1 f0       	breq	.+52     	; 0x9de <DIO_enuSetPortValue+0x62>
     9aa:	2c 81       	ldd	r18, Y+4	; 0x04
     9ac:	3d 81       	ldd	r19, Y+5	; 0x05
     9ae:	22 30       	cpi	r18, 0x02	; 2
     9b0:	31 05       	cpc	r19, r1
     9b2:	2c f4       	brge	.+10     	; 0x9be <DIO_enuSetPortValue+0x42>
     9b4:	8c 81       	ldd	r24, Y+4	; 0x04
     9b6:	9d 81       	ldd	r25, Y+5	; 0x05
     9b8:	00 97       	sbiw	r24, 0x00	; 0
     9ba:	61 f0       	breq	.+24     	; 0x9d4 <DIO_enuSetPortValue+0x58>
     9bc:	1e c0       	rjmp	.+60     	; 0x9fa <DIO_enuSetPortValue+0x7e>
     9be:	2c 81       	ldd	r18, Y+4	; 0x04
     9c0:	3d 81       	ldd	r19, Y+5	; 0x05
     9c2:	22 30       	cpi	r18, 0x02	; 2
     9c4:	31 05       	cpc	r19, r1
     9c6:	81 f0       	breq	.+32     	; 0x9e8 <DIO_enuSetPortValue+0x6c>
     9c8:	8c 81       	ldd	r24, Y+4	; 0x04
     9ca:	9d 81       	ldd	r25, Y+5	; 0x05
     9cc:	83 30       	cpi	r24, 0x03	; 3
     9ce:	91 05       	cpc	r25, r1
     9d0:	81 f0       	breq	.+32     	; 0x9f2 <DIO_enuSetPortValue+0x76>
     9d2:	13 c0       	rjmp	.+38     	; 0x9fa <DIO_enuSetPortValue+0x7e>
		{
		case DIO_u8PORTA : PORTA = copy_u8Value ; break;
     9d4:	eb e3       	ldi	r30, 0x3B	; 59
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	8b 81       	ldd	r24, Y+3	; 0x03
     9da:	80 83       	st	Z, r24
     9dc:	0e c0       	rjmp	.+28     	; 0x9fa <DIO_enuSetPortValue+0x7e>
		case DIO_u8PORTB : PORTB = copy_u8Value ; break;
     9de:	e8 e3       	ldi	r30, 0x38	; 56
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	8b 81       	ldd	r24, Y+3	; 0x03
     9e4:	80 83       	st	Z, r24
     9e6:	09 c0       	rjmp	.+18     	; 0x9fa <DIO_enuSetPortValue+0x7e>
		case DIO_u8PORTC : PORTC = copy_u8Value ; break;
     9e8:	e5 e3       	ldi	r30, 0x35	; 53
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	8b 81       	ldd	r24, Y+3	; 0x03
     9ee:	80 83       	st	Z, r24
     9f0:	04 c0       	rjmp	.+8      	; 0x9fa <DIO_enuSetPortValue+0x7e>
		case DIO_u8PORTD : PORTD = copy_u8Value ; break;
     9f2:	e2 e3       	ldi	r30, 0x32	; 50
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	8b 81       	ldd	r24, Y+3	; 0x03
     9f8:	80 83       	st	Z, r24
		} Local_u8ErrorState = ES_OK ;
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	89 83       	std	Y+1, r24	; 0x01
     9fe:	02 c0       	rjmp	.+4      	; 0xa04 <DIO_enuSetPortValue+0x88>

	}
	else
	{
		Local_u8ErrorState = ES_OUT_OF_RANGE;
     a00:	83 e0       	ldi	r24, 0x03	; 3
     a02:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     a04:	89 81       	ldd	r24, Y+1	; 0x01

}
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	cf 91       	pop	r28
     a12:	df 91       	pop	r29
     a14:	08 95       	ret

00000a16 <DIO_enuTogPortValue>:
/** Arguments       : Port & Value.                                         **/
/** Functionality   : Toggling Port Value                                   **/
/*****************************************************************************/
/*****************************************************************************/
ES_t DIO_enuTogPortValue(u8 copy_u8Port)
{
     a16:	df 93       	push	r29
     a18:	cf 93       	push	r28
     a1a:	00 d0       	rcall	.+0      	; 0xa1c <DIO_enuTogPortValue+0x6>
     a1c:	00 d0       	rcall	.+0      	; 0xa1e <DIO_enuTogPortValue+0x8>
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
     a22:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_u8ErrorState = ES_NOK; //0 indicates no problem
     a24:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8Port <= DIO_u8PORTD)
     a26:	8a 81       	ldd	r24, Y+2	; 0x02
     a28:	84 30       	cpi	r24, 0x04	; 4
     a2a:	08 f0       	brcs	.+2      	; 0xa2e <DIO_enuTogPortValue+0x18>
     a2c:	41 c0       	rjmp	.+130    	; 0xab0 <DIO_enuTogPortValue+0x9a>
	{
		switch(copy_u8Port)
     a2e:	8a 81       	ldd	r24, Y+2	; 0x02
     a30:	28 2f       	mov	r18, r24
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	3c 83       	std	Y+4, r19	; 0x04
     a36:	2b 83       	std	Y+3, r18	; 0x03
     a38:	8b 81       	ldd	r24, Y+3	; 0x03
     a3a:	9c 81       	ldd	r25, Y+4	; 0x04
     a3c:	81 30       	cpi	r24, 0x01	; 1
     a3e:	91 05       	cpc	r25, r1
     a40:	e9 f0       	breq	.+58     	; 0xa7c <DIO_enuTogPortValue+0x66>
     a42:	2b 81       	ldd	r18, Y+3	; 0x03
     a44:	3c 81       	ldd	r19, Y+4	; 0x04
     a46:	22 30       	cpi	r18, 0x02	; 2
     a48:	31 05       	cpc	r19, r1
     a4a:	2c f4       	brge	.+10     	; 0xa56 <DIO_enuTogPortValue+0x40>
     a4c:	8b 81       	ldd	r24, Y+3	; 0x03
     a4e:	9c 81       	ldd	r25, Y+4	; 0x04
     a50:	00 97       	sbiw	r24, 0x00	; 0
     a52:	61 f0       	breq	.+24     	; 0xa6c <DIO_enuTogPortValue+0x56>
     a54:	2a c0       	rjmp	.+84     	; 0xaaa <DIO_enuTogPortValue+0x94>
     a56:	2b 81       	ldd	r18, Y+3	; 0x03
     a58:	3c 81       	ldd	r19, Y+4	; 0x04
     a5a:	22 30       	cpi	r18, 0x02	; 2
     a5c:	31 05       	cpc	r19, r1
     a5e:	b1 f0       	breq	.+44     	; 0xa8c <DIO_enuTogPortValue+0x76>
     a60:	8b 81       	ldd	r24, Y+3	; 0x03
     a62:	9c 81       	ldd	r25, Y+4	; 0x04
     a64:	83 30       	cpi	r24, 0x03	; 3
     a66:	91 05       	cpc	r25, r1
     a68:	c9 f0       	breq	.+50     	; 0xa9c <DIO_enuTogPortValue+0x86>
     a6a:	1f c0       	rjmp	.+62     	; 0xaaa <DIO_enuTogPortValue+0x94>
		{
		case DIO_u8PORTA : PORTA = ~PORTA ; break;
     a6c:	ab e3       	ldi	r26, 0x3B	; 59
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	eb e3       	ldi	r30, 0x3B	; 59
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	80 81       	ld	r24, Z
     a76:	80 95       	com	r24
     a78:	8c 93       	st	X, r24
     a7a:	17 c0       	rjmp	.+46     	; 0xaaa <DIO_enuTogPortValue+0x94>
		case DIO_u8PORTB : PORTB = ~PORTB ; break;
     a7c:	a8 e3       	ldi	r26, 0x38	; 56
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	e8 e3       	ldi	r30, 0x38	; 56
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	80 81       	ld	r24, Z
     a86:	80 95       	com	r24
     a88:	8c 93       	st	X, r24
     a8a:	0f c0       	rjmp	.+30     	; 0xaaa <DIO_enuTogPortValue+0x94>
		case DIO_u8PORTC : PORTC = ~PORTC ; break;
     a8c:	a5 e3       	ldi	r26, 0x35	; 53
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e5 e3       	ldi	r30, 0x35	; 53
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	80 81       	ld	r24, Z
     a96:	80 95       	com	r24
     a98:	8c 93       	st	X, r24
     a9a:	07 c0       	rjmp	.+14     	; 0xaaa <DIO_enuTogPortValue+0x94>
		case DIO_u8PORTD : PORTD = ~PORTD ; break;
     a9c:	a2 e3       	ldi	r26, 0x32	; 50
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e2 e3       	ldi	r30, 0x32	; 50
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	80 81       	ld	r24, Z
     aa6:	80 95       	com	r24
     aa8:	8c 93       	st	X, r24
		} Local_u8ErrorState = ES_OK ;
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	89 83       	std	Y+1, r24	; 0x01
     aae:	02 c0       	rjmp	.+4      	; 0xab4 <DIO_enuTogPortValue+0x9e>

	}
	else
	{
		Local_u8ErrorState = ES_OUT_OF_RANGE;
     ab0:	83 e0       	ldi	r24, 0x03	; 3
     ab2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     ab4:	89 81       	ldd	r24, Y+1	; 0x01

}
     ab6:	0f 90       	pop	r0
     ab8:	0f 90       	pop	r0
     aba:	0f 90       	pop	r0
     abc:	0f 90       	pop	r0
     abe:	cf 91       	pop	r28
     ac0:	df 91       	pop	r29
     ac2:	08 95       	ret

00000ac4 <DIO_enuGetPortValue>:
/** Arguments       : Port & Value.                                         **/
/** Functionality   : Getting Port Value                                    **/
/*****************************************************************************/
/*****************************************************************************/
ES_t DIO_enuGetPortValue(u8 copy_u8Port , u8* copy_pu8Value)
{
     ac4:	df 93       	push	r29
     ac6:	cf 93       	push	r28
     ac8:	00 d0       	rcall	.+0      	; 0xaca <DIO_enuGetPortValue+0x6>
     aca:	00 d0       	rcall	.+0      	; 0xacc <DIO_enuGetPortValue+0x8>
     acc:	00 d0       	rcall	.+0      	; 0xace <DIO_enuGetPortValue+0xa>
     ace:	cd b7       	in	r28, 0x3d	; 61
     ad0:	de b7       	in	r29, 0x3e	; 62
     ad2:	8a 83       	std	Y+2, r24	; 0x02
     ad4:	7c 83       	std	Y+4, r23	; 0x04
     ad6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_u8ErrorState = ES_NOK;
     ad8:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pu8Value != NULL)
     ada:	8b 81       	ldd	r24, Y+3	; 0x03
     adc:	9c 81       	ldd	r25, Y+4	; 0x04
     ade:	00 97       	sbiw	r24, 0x00	; 0
     ae0:	09 f4       	brne	.+2      	; 0xae4 <DIO_enuGetPortValue+0x20>
     ae2:	43 c0       	rjmp	.+134    	; 0xb6a <DIO_enuGetPortValue+0xa6>
	{
		if(copy_u8Port <= DIO_u8PORTD)
     ae4:	8a 81       	ldd	r24, Y+2	; 0x02
     ae6:	84 30       	cpi	r24, 0x04	; 4
     ae8:	e8 f5       	brcc	.+122    	; 0xb64 <DIO_enuGetPortValue+0xa0>
		{
			switch(copy_u8Port)
     aea:	8a 81       	ldd	r24, Y+2	; 0x02
     aec:	28 2f       	mov	r18, r24
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	3e 83       	std	Y+6, r19	; 0x06
     af2:	2d 83       	std	Y+5, r18	; 0x05
     af4:	8d 81       	ldd	r24, Y+5	; 0x05
     af6:	9e 81       	ldd	r25, Y+6	; 0x06
     af8:	81 30       	cpi	r24, 0x01	; 1
     afa:	91 05       	cpc	r25, r1
     afc:	e1 f0       	breq	.+56     	; 0xb36 <DIO_enuGetPortValue+0x72>
     afe:	2d 81       	ldd	r18, Y+5	; 0x05
     b00:	3e 81       	ldd	r19, Y+6	; 0x06
     b02:	22 30       	cpi	r18, 0x02	; 2
     b04:	31 05       	cpc	r19, r1
     b06:	2c f4       	brge	.+10     	; 0xb12 <DIO_enuGetPortValue+0x4e>
     b08:	8d 81       	ldd	r24, Y+5	; 0x05
     b0a:	9e 81       	ldd	r25, Y+6	; 0x06
     b0c:	00 97       	sbiw	r24, 0x00	; 0
     b0e:	61 f0       	breq	.+24     	; 0xb28 <DIO_enuGetPortValue+0x64>
     b10:	26 c0       	rjmp	.+76     	; 0xb5e <DIO_enuGetPortValue+0x9a>
     b12:	2d 81       	ldd	r18, Y+5	; 0x05
     b14:	3e 81       	ldd	r19, Y+6	; 0x06
     b16:	22 30       	cpi	r18, 0x02	; 2
     b18:	31 05       	cpc	r19, r1
     b1a:	a1 f0       	breq	.+40     	; 0xb44 <DIO_enuGetPortValue+0x80>
     b1c:	8d 81       	ldd	r24, Y+5	; 0x05
     b1e:	9e 81       	ldd	r25, Y+6	; 0x06
     b20:	83 30       	cpi	r24, 0x03	; 3
     b22:	91 05       	cpc	r25, r1
     b24:	b1 f0       	breq	.+44     	; 0xb52 <DIO_enuGetPortValue+0x8e>
     b26:	1b c0       	rjmp	.+54     	; 0xb5e <DIO_enuGetPortValue+0x9a>
			{
			case DIO_u8PORTA : *copy_pu8Value = PINA ; break;
     b28:	e9 e3       	ldi	r30, 0x39	; 57
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	80 81       	ld	r24, Z
     b2e:	eb 81       	ldd	r30, Y+3	; 0x03
     b30:	fc 81       	ldd	r31, Y+4	; 0x04
     b32:	80 83       	st	Z, r24
     b34:	14 c0       	rjmp	.+40     	; 0xb5e <DIO_enuGetPortValue+0x9a>
			case DIO_u8PORTB : *copy_pu8Value = PINB ; break;
     b36:	e6 e3       	ldi	r30, 0x36	; 54
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	80 81       	ld	r24, Z
     b3c:	eb 81       	ldd	r30, Y+3	; 0x03
     b3e:	fc 81       	ldd	r31, Y+4	; 0x04
     b40:	80 83       	st	Z, r24
     b42:	0d c0       	rjmp	.+26     	; 0xb5e <DIO_enuGetPortValue+0x9a>
			case DIO_u8PORTC : *copy_pu8Value = PINC ; break;
     b44:	e3 e3       	ldi	r30, 0x33	; 51
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	80 81       	ld	r24, Z
     b4a:	eb 81       	ldd	r30, Y+3	; 0x03
     b4c:	fc 81       	ldd	r31, Y+4	; 0x04
     b4e:	80 83       	st	Z, r24
     b50:	06 c0       	rjmp	.+12     	; 0xb5e <DIO_enuGetPortValue+0x9a>
			case DIO_u8PORTD : *copy_pu8Value = PIND  ; break;
     b52:	e0 e3       	ldi	r30, 0x30	; 48
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	eb 81       	ldd	r30, Y+3	; 0x03
     b5a:	fc 81       	ldd	r31, Y+4	; 0x04
     b5c:	80 83       	st	Z, r24
			} Local_u8ErrorState = ES_OK ;
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	89 83       	std	Y+1, r24	; 0x01
     b62:	05 c0       	rjmp	.+10     	; 0xb6e <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_u8ErrorState = ES_OUT_OF_RANGE;
     b64:	83 e0       	ldi	r24, 0x03	; 3
     b66:	89 83       	std	Y+1, r24	; 0x01
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <DIO_enuGetPortValue+0xaa>
		}

	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
}
     b70:	26 96       	adiw	r28, 0x06	; 6
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	f8 94       	cli
     b76:	de bf       	out	0x3e, r29	; 62
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	cd bf       	out	0x3d, r28	; 61
     b7c:	cf 91       	pop	r28
     b7e:	df 91       	pop	r29
     b80:	08 95       	ret

00000b82 <DIO_enuSetPinValue>:
/** Arguments       : Port & Value.                                         **/
/** Functionality   : Setting Pin Value                                     **/
/*****************************************************************************/
/*****************************************************************************/
ES_t DIO_enuSetPinValue(u8 copy_u8Port , u8 copy_u8Pin , u8 copy_u8Value)
{
     b82:	df 93       	push	r29
     b84:	cf 93       	push	r28
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	28 97       	sbiw	r28, 0x08	; 8
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	cd bf       	out	0x3d, r28	; 61
     b96:	8a 83       	std	Y+2, r24	; 0x02
     b98:	6b 83       	std	Y+3, r22	; 0x03
     b9a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_u8ErrorState = ES_NOK; //0 indicates no problem
     b9c:	19 82       	std	Y+1, r1	; 0x01
	if((copy_u8Pin <= DIO_u8PIN7) && (copy_u8Port <= DIO_u8PORTD))
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	88 30       	cpi	r24, 0x08	; 8
     ba2:	08 f0       	brcs	.+2      	; 0xba6 <DIO_enuSetPinValue+0x24>
     ba4:	f6 c0       	rjmp	.+492    	; 0xd92 <DIO_enuSetPinValue+0x210>
     ba6:	8a 81       	ldd	r24, Y+2	; 0x02
     ba8:	84 30       	cpi	r24, 0x04	; 4
     baa:	08 f0       	brcs	.+2      	; 0xbae <DIO_enuSetPinValue+0x2c>
     bac:	f2 c0       	rjmp	.+484    	; 0xd92 <DIO_enuSetPinValue+0x210>
	{
		if(copy_u8Value == HIGH)
     bae:	8c 81       	ldd	r24, Y+4	; 0x04
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	09 f0       	breq	.+2      	; 0xbb6 <DIO_enuSetPinValue+0x34>
     bb4:	71 c0       	rjmp	.+226    	; 0xc98 <DIO_enuSetPinValue+0x116>
		{
			switch(copy_u8Port)
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	28 2f       	mov	r18, r24
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	38 87       	std	Y+8, r19	; 0x08
     bbe:	2f 83       	std	Y+7, r18	; 0x07
     bc0:	8f 81       	ldd	r24, Y+7	; 0x07
     bc2:	98 85       	ldd	r25, Y+8	; 0x08
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	91 05       	cpc	r25, r1
     bc8:	49 f1       	breq	.+82     	; 0xc1c <DIO_enuSetPinValue+0x9a>
     bca:	2f 81       	ldd	r18, Y+7	; 0x07
     bcc:	38 85       	ldd	r19, Y+8	; 0x08
     bce:	22 30       	cpi	r18, 0x02	; 2
     bd0:	31 05       	cpc	r19, r1
     bd2:	2c f4       	brge	.+10     	; 0xbde <DIO_enuSetPinValue+0x5c>
     bd4:	8f 81       	ldd	r24, Y+7	; 0x07
     bd6:	98 85       	ldd	r25, Y+8	; 0x08
     bd8:	00 97       	sbiw	r24, 0x00	; 0
     bda:	61 f0       	breq	.+24     	; 0xbf4 <DIO_enuSetPinValue+0x72>
     bdc:	5a c0       	rjmp	.+180    	; 0xc92 <DIO_enuSetPinValue+0x110>
     bde:	2f 81       	ldd	r18, Y+7	; 0x07
     be0:	38 85       	ldd	r19, Y+8	; 0x08
     be2:	22 30       	cpi	r18, 0x02	; 2
     be4:	31 05       	cpc	r19, r1
     be6:	71 f1       	breq	.+92     	; 0xc44 <DIO_enuSetPinValue+0xc2>
     be8:	8f 81       	ldd	r24, Y+7	; 0x07
     bea:	98 85       	ldd	r25, Y+8	; 0x08
     bec:	83 30       	cpi	r24, 0x03	; 3
     bee:	91 05       	cpc	r25, r1
     bf0:	e9 f1       	breq	.+122    	; 0xc6c <DIO_enuSetPinValue+0xea>
     bf2:	4f c0       	rjmp	.+158    	; 0xc92 <DIO_enuSetPinValue+0x110>
			{
			case DIO_u8PORTA: SET_BIT(PORTA , copy_u8Pin); break;
     bf4:	ab e3       	ldi	r26, 0x3B	; 59
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	eb e3       	ldi	r30, 0x3B	; 59
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	48 2f       	mov	r20, r24
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	28 2f       	mov	r18, r24
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	02 2e       	mov	r0, r18
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <DIO_enuSetPinValue+0x90>
     c0e:	88 0f       	add	r24, r24
     c10:	99 1f       	adc	r25, r25
     c12:	0a 94       	dec	r0
     c14:	e2 f7       	brpl	.-8      	; 0xc0e <DIO_enuSetPinValue+0x8c>
     c16:	84 2b       	or	r24, r20
     c18:	8c 93       	st	X, r24
     c1a:	3b c0       	rjmp	.+118    	; 0xc92 <DIO_enuSetPinValue+0x110>
			case DIO_u8PORTB: SET_BIT(PORTB , copy_u8Pin); break;
     c1c:	a8 e3       	ldi	r26, 0x38	; 56
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	e8 e3       	ldi	r30, 0x38	; 56
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	48 2f       	mov	r20, r24
     c28:	8b 81       	ldd	r24, Y+3	; 0x03
     c2a:	28 2f       	mov	r18, r24
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	02 2e       	mov	r0, r18
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <DIO_enuSetPinValue+0xb8>
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	0a 94       	dec	r0
     c3c:	e2 f7       	brpl	.-8      	; 0xc36 <DIO_enuSetPinValue+0xb4>
     c3e:	84 2b       	or	r24, r20
     c40:	8c 93       	st	X, r24
     c42:	27 c0       	rjmp	.+78     	; 0xc92 <DIO_enuSetPinValue+0x110>
			case DIO_u8PORTC: SET_BIT(PORTC , copy_u8Pin); break;
     c44:	a5 e3       	ldi	r26, 0x35	; 53
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e5 e3       	ldi	r30, 0x35	; 53
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	48 2f       	mov	r20, r24
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	02 2e       	mov	r0, r18
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <DIO_enuSetPinValue+0xe0>
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	0a 94       	dec	r0
     c64:	e2 f7       	brpl	.-8      	; 0xc5e <DIO_enuSetPinValue+0xdc>
     c66:	84 2b       	or	r24, r20
     c68:	8c 93       	st	X, r24
     c6a:	13 c0       	rjmp	.+38     	; 0xc92 <DIO_enuSetPinValue+0x110>
			case DIO_u8PORTD: SET_BIT(PORTD , copy_u8Pin); break;
     c6c:	a2 e3       	ldi	r26, 0x32	; 50
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	e2 e3       	ldi	r30, 0x32	; 50
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	48 2f       	mov	r20, r24
     c78:	8b 81       	ldd	r24, Y+3	; 0x03
     c7a:	28 2f       	mov	r18, r24
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	02 2e       	mov	r0, r18
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <DIO_enuSetPinValue+0x108>
     c86:	88 0f       	add	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	0a 94       	dec	r0
     c8c:	e2 f7       	brpl	.-8      	; 0xc86 <DIO_enuSetPinValue+0x104>
     c8e:	84 2b       	or	r24, r20
     c90:	8c 93       	st	X, r24
			}Local_u8ErrorState = ES_OK;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	89 83       	std	Y+1, r24	; 0x01
     c96:	7f c0       	rjmp	.+254    	; 0xd96 <DIO_enuSetPinValue+0x214>
		}
		else if(copy_u8Value == LOW)
     c98:	8c 81       	ldd	r24, Y+4	; 0x04
     c9a:	88 23       	and	r24, r24
     c9c:	09 f0       	breq	.+2      	; 0xca0 <DIO_enuSetPinValue+0x11e>
     c9e:	76 c0       	rjmp	.+236    	; 0xd8c <DIO_enuSetPinValue+0x20a>
		{
			switch(copy_u8Port)
     ca0:	8a 81       	ldd	r24, Y+2	; 0x02
     ca2:	28 2f       	mov	r18, r24
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	3e 83       	std	Y+6, r19	; 0x06
     ca8:	2d 83       	std	Y+5, r18	; 0x05
     caa:	8d 81       	ldd	r24, Y+5	; 0x05
     cac:	9e 81       	ldd	r25, Y+6	; 0x06
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	91 05       	cpc	r25, r1
     cb2:	59 f1       	breq	.+86     	; 0xd0a <DIO_enuSetPinValue+0x188>
     cb4:	2d 81       	ldd	r18, Y+5	; 0x05
     cb6:	3e 81       	ldd	r19, Y+6	; 0x06
     cb8:	22 30       	cpi	r18, 0x02	; 2
     cba:	31 05       	cpc	r19, r1
     cbc:	2c f4       	brge	.+10     	; 0xcc8 <DIO_enuSetPinValue+0x146>
     cbe:	8d 81       	ldd	r24, Y+5	; 0x05
     cc0:	9e 81       	ldd	r25, Y+6	; 0x06
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	69 f0       	breq	.+26     	; 0xce0 <DIO_enuSetPinValue+0x15e>
     cc6:	5f c0       	rjmp	.+190    	; 0xd86 <DIO_enuSetPinValue+0x204>
     cc8:	2d 81       	ldd	r18, Y+5	; 0x05
     cca:	3e 81       	ldd	r19, Y+6	; 0x06
     ccc:	22 30       	cpi	r18, 0x02	; 2
     cce:	31 05       	cpc	r19, r1
     cd0:	89 f1       	breq	.+98     	; 0xd34 <DIO_enuSetPinValue+0x1b2>
     cd2:	8d 81       	ldd	r24, Y+5	; 0x05
     cd4:	9e 81       	ldd	r25, Y+6	; 0x06
     cd6:	83 30       	cpi	r24, 0x03	; 3
     cd8:	91 05       	cpc	r25, r1
     cda:	09 f4       	brne	.+2      	; 0xcde <DIO_enuSetPinValue+0x15c>
     cdc:	40 c0       	rjmp	.+128    	; 0xd5e <DIO_enuSetPinValue+0x1dc>
     cde:	53 c0       	rjmp	.+166    	; 0xd86 <DIO_enuSetPinValue+0x204>
			{
			case DIO_u8PORTA: CLEAR_BIT(PORTA , copy_u8Pin); break;
     ce0:	ab e3       	ldi	r26, 0x3B	; 59
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	eb e3       	ldi	r30, 0x3B	; 59
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	48 2f       	mov	r20, r24
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	02 2e       	mov	r0, r18
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <DIO_enuSetPinValue+0x17c>
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	0a 94       	dec	r0
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <DIO_enuSetPinValue+0x178>
     d02:	80 95       	com	r24
     d04:	84 23       	and	r24, r20
     d06:	8c 93       	st	X, r24
     d08:	3e c0       	rjmp	.+124    	; 0xd86 <DIO_enuSetPinValue+0x204>
			case DIO_u8PORTB: CLEAR_BIT(PORTB , copy_u8Pin); break;
     d0a:	a8 e3       	ldi	r26, 0x38	; 56
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e8 e3       	ldi	r30, 0x38	; 56
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	48 2f       	mov	r20, r24
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	02 2e       	mov	r0, r18
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <DIO_enuSetPinValue+0x1a6>
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	0a 94       	dec	r0
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <DIO_enuSetPinValue+0x1a2>
     d2c:	80 95       	com	r24
     d2e:	84 23       	and	r24, r20
     d30:	8c 93       	st	X, r24
     d32:	29 c0       	rjmp	.+82     	; 0xd86 <DIO_enuSetPinValue+0x204>
			case DIO_u8PORTC: CLEAR_BIT(PORTC , copy_u8Pin); break;
     d34:	a5 e3       	ldi	r26, 0x35	; 53
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e5 e3       	ldi	r30, 0x35	; 53
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	48 2f       	mov	r20, r24
     d40:	8b 81       	ldd	r24, Y+3	; 0x03
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	02 2e       	mov	r0, r18
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <DIO_enuSetPinValue+0x1d0>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	0a 94       	dec	r0
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <DIO_enuSetPinValue+0x1cc>
     d56:	80 95       	com	r24
     d58:	84 23       	and	r24, r20
     d5a:	8c 93       	st	X, r24
     d5c:	14 c0       	rjmp	.+40     	; 0xd86 <DIO_enuSetPinValue+0x204>
			case DIO_u8PORTD: CLEAR_BIT(PORTD , copy_u8Pin); break;
     d5e:	a2 e3       	ldi	r26, 0x32	; 50
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e2 e3       	ldi	r30, 0x32	; 50
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	48 2f       	mov	r20, r24
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 2e       	mov	r0, r18
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_enuSetPinValue+0x1fa>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	0a 94       	dec	r0
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_enuSetPinValue+0x1f6>
     d80:	80 95       	com	r24
     d82:	84 23       	and	r24, r20
     d84:	8c 93       	st	X, r24
			}Local_u8ErrorState = ES_OK;
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	89 83       	std	Y+1, r24	; 0x01
     d8a:	05 c0       	rjmp	.+10     	; 0xd96 <DIO_enuSetPinValue+0x214>
		}
		else
		{
			Local_u8ErrorState = ES_OUT_OF_RANGE;
     d8c:	83 e0       	ldi	r24, 0x03	; 3
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <DIO_enuSetPinValue+0x214>


	}
	else
	{
		Local_u8ErrorState = ES_OUT_OF_RANGE;
     d92:	83 e0       	ldi	r24, 0x03	; 3
     d94:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     d96:	89 81       	ldd	r24, Y+1	; 0x01
}
     d98:	28 96       	adiw	r28, 0x08	; 8
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	de bf       	out	0x3e, r29	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	cd bf       	out	0x3d, r28	; 61
     da4:	cf 91       	pop	r28
     da6:	df 91       	pop	r29
     da8:	08 95       	ret

00000daa <DIO_enuTogPinValue>:
/** Arguments       : Port & Value.                                         **/
/** Functionality   : Toggling Pin Value                                    **/
/*****************************************************************************/
/*****************************************************************************/
ES_t DIO_enuTogPinValue(u8 copy_u8Port , u8 copy_u8Pin)
{
     daa:	df 93       	push	r29
     dac:	cf 93       	push	r28
     dae:	00 d0       	rcall	.+0      	; 0xdb0 <DIO_enuTogPinValue+0x6>
     db0:	00 d0       	rcall	.+0      	; 0xdb2 <DIO_enuTogPinValue+0x8>
     db2:	0f 92       	push	r0
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	8a 83       	std	Y+2, r24	; 0x02
     dba:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_u8ErrorState = ES_NOK; //0 indicates no problem
     dbc:	19 82       	std	Y+1, r1	; 0x01
	if((copy_u8Pin <= DIO_u8PIN7) && (copy_u8Port <= DIO_u8PORTD))
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	88 30       	cpi	r24, 0x08	; 8
     dc2:	08 f0       	brcs	.+2      	; 0xdc6 <DIO_enuTogPinValue+0x1c>
     dc4:	75 c0       	rjmp	.+234    	; 0xeb0 <DIO_enuTogPinValue+0x106>
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	84 30       	cpi	r24, 0x04	; 4
     dca:	08 f0       	brcs	.+2      	; 0xdce <DIO_enuTogPinValue+0x24>
     dcc:	71 c0       	rjmp	.+226    	; 0xeb0 <DIO_enuTogPinValue+0x106>
	{
		switch(copy_u8Port)
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	3d 83       	std	Y+5, r19	; 0x05
     dd6:	2c 83       	std	Y+4, r18	; 0x04
     dd8:	8c 81       	ldd	r24, Y+4	; 0x04
     dda:	9d 81       	ldd	r25, Y+5	; 0x05
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	91 05       	cpc	r25, r1
     de0:	49 f1       	breq	.+82     	; 0xe34 <DIO_enuTogPinValue+0x8a>
     de2:	2c 81       	ldd	r18, Y+4	; 0x04
     de4:	3d 81       	ldd	r19, Y+5	; 0x05
     de6:	22 30       	cpi	r18, 0x02	; 2
     de8:	31 05       	cpc	r19, r1
     dea:	2c f4       	brge	.+10     	; 0xdf6 <DIO_enuTogPinValue+0x4c>
     dec:	8c 81       	ldd	r24, Y+4	; 0x04
     dee:	9d 81       	ldd	r25, Y+5	; 0x05
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	61 f0       	breq	.+24     	; 0xe0c <DIO_enuTogPinValue+0x62>
     df4:	5a c0       	rjmp	.+180    	; 0xeaa <DIO_enuTogPinValue+0x100>
     df6:	2c 81       	ldd	r18, Y+4	; 0x04
     df8:	3d 81       	ldd	r19, Y+5	; 0x05
     dfa:	22 30       	cpi	r18, 0x02	; 2
     dfc:	31 05       	cpc	r19, r1
     dfe:	71 f1       	breq	.+92     	; 0xe5c <DIO_enuTogPinValue+0xb2>
     e00:	8c 81       	ldd	r24, Y+4	; 0x04
     e02:	9d 81       	ldd	r25, Y+5	; 0x05
     e04:	83 30       	cpi	r24, 0x03	; 3
     e06:	91 05       	cpc	r25, r1
     e08:	e9 f1       	breq	.+122    	; 0xe84 <DIO_enuTogPinValue+0xda>
     e0a:	4f c0       	rjmp	.+158    	; 0xeaa <DIO_enuTogPinValue+0x100>
		{
		case DIO_u8PORTA: TOGGLE_BIT(PORTA , copy_u8Pin); break;
     e0c:	ab e3       	ldi	r26, 0x3B	; 59
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	eb e3       	ldi	r30, 0x3B	; 59
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	48 2f       	mov	r20, r24
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	02 2e       	mov	r0, r18
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <DIO_enuTogPinValue+0x80>
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	0a 94       	dec	r0
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <DIO_enuTogPinValue+0x7c>
     e2e:	84 27       	eor	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	3b c0       	rjmp	.+118    	; 0xeaa <DIO_enuTogPinValue+0x100>
		case DIO_u8PORTB: TOGGLE_BIT(PORTB , copy_u8Pin); break;
     e34:	a8 e3       	ldi	r26, 0x38	; 56
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e8 e3       	ldi	r30, 0x38	; 56
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	48 2f       	mov	r20, r24
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 2e       	mov	r0, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <DIO_enuTogPinValue+0xa8>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	0a 94       	dec	r0
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <DIO_enuTogPinValue+0xa4>
     e56:	84 27       	eor	r24, r20
     e58:	8c 93       	st	X, r24
     e5a:	27 c0       	rjmp	.+78     	; 0xeaa <DIO_enuTogPinValue+0x100>
		case DIO_u8PORTC: TOGGLE_BIT(PORTC , copy_u8Pin); break;
     e5c:	a5 e3       	ldi	r26, 0x35	; 53
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e5 e3       	ldi	r30, 0x35	; 53
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	48 2f       	mov	r20, r24
     e68:	8b 81       	ldd	r24, Y+3	; 0x03
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	02 2e       	mov	r0, r18
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <DIO_enuTogPinValue+0xd0>
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	0a 94       	dec	r0
     e7c:	e2 f7       	brpl	.-8      	; 0xe76 <DIO_enuTogPinValue+0xcc>
     e7e:	84 27       	eor	r24, r20
     e80:	8c 93       	st	X, r24
     e82:	13 c0       	rjmp	.+38     	; 0xeaa <DIO_enuTogPinValue+0x100>
		case DIO_u8PORTD: TOGGLE_BIT(PORTD , copy_u8Pin); break;
     e84:	a2 e3       	ldi	r26, 0x32	; 50
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e2 e3       	ldi	r30, 0x32	; 50
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	48 2f       	mov	r20, r24
     e90:	8b 81       	ldd	r24, Y+3	; 0x03
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 2e       	mov	r0, r18
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <DIO_enuTogPinValue+0xf8>
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	0a 94       	dec	r0
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <DIO_enuTogPinValue+0xf4>
     ea6:	84 27       	eor	r24, r20
     ea8:	8c 93       	st	X, r24
		}Local_u8ErrorState = ES_OK;
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	89 83       	std	Y+1, r24	; 0x01
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <DIO_enuTogPinValue+0x10a>

	}
	else
	{
		Local_u8ErrorState = ES_OUT_OF_RANGE;
     eb0:	83 e0       	ldi	r24, 0x03	; 3
     eb2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <DIO_enuGetPinValue>:
/** Arguments       : Port & Value.                                         **/
/** Functionality   : Getting Pin Value                                     **/
/*****************************************************************************/
/*****************************************************************************/
ES_t DIO_enuGetPinValue(u8 copy_u8Port , u8 copy_u8Pin , u8* copy_Pu8Value)//pu8 pointer to u8
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	27 97       	sbiw	r28, 0x07	; 7
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	8a 83       	std	Y+2, r24	; 0x02
     edc:	6b 83       	std	Y+3, r22	; 0x03
     ede:	5d 83       	std	Y+5, r21	; 0x05
     ee0:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_u8ErrorState = ES_NOK; //0 indicates no problem
     ee2:	19 82       	std	Y+1, r1	; 0x01
	if(copy_Pu8Value != NULL)
     ee4:	8c 81       	ldd	r24, Y+4	; 0x04
     ee6:	9d 81       	ldd	r25, Y+5	; 0x05
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	09 f4       	brne	.+2      	; 0xeee <DIO_enuGetPinValue+0x28>
     eec:	7e c0       	rjmp	.+252    	; 0xfea <DIO_enuGetPinValue+0x124>
	{
		if((copy_u8Pin <= DIO_u8PIN7) && (copy_u8Port <= DIO_u8PORTD))
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	88 30       	cpi	r24, 0x08	; 8
     ef2:	08 f0       	brcs	.+2      	; 0xef6 <DIO_enuGetPinValue+0x30>
     ef4:	77 c0       	rjmp	.+238    	; 0xfe4 <DIO_enuGetPinValue+0x11e>
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	84 30       	cpi	r24, 0x04	; 4
     efa:	08 f0       	brcs	.+2      	; 0xefe <DIO_enuGetPinValue+0x38>
     efc:	73 c0       	rjmp	.+230    	; 0xfe4 <DIO_enuGetPinValue+0x11e>
		{
			switch(copy_u8Port)
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	3f 83       	std	Y+7, r19	; 0x07
     f06:	2e 83       	std	Y+6, r18	; 0x06
     f08:	4e 81       	ldd	r20, Y+6	; 0x06
     f0a:	5f 81       	ldd	r21, Y+7	; 0x07
     f0c:	41 30       	cpi	r20, 0x01	; 1
     f0e:	51 05       	cpc	r21, r1
     f10:	59 f1       	breq	.+86     	; 0xf68 <DIO_enuGetPinValue+0xa2>
     f12:	8e 81       	ldd	r24, Y+6	; 0x06
     f14:	9f 81       	ldd	r25, Y+7	; 0x07
     f16:	82 30       	cpi	r24, 0x02	; 2
     f18:	91 05       	cpc	r25, r1
     f1a:	34 f4       	brge	.+12     	; 0xf28 <DIO_enuGetPinValue+0x62>
     f1c:	2e 81       	ldd	r18, Y+6	; 0x06
     f1e:	3f 81       	ldd	r19, Y+7	; 0x07
     f20:	21 15       	cp	r18, r1
     f22:	31 05       	cpc	r19, r1
     f24:	69 f0       	breq	.+26     	; 0xf40 <DIO_enuGetPinValue+0x7a>
     f26:	5b c0       	rjmp	.+182    	; 0xfde <DIO_enuGetPinValue+0x118>
     f28:	4e 81       	ldd	r20, Y+6	; 0x06
     f2a:	5f 81       	ldd	r21, Y+7	; 0x07
     f2c:	42 30       	cpi	r20, 0x02	; 2
     f2e:	51 05       	cpc	r21, r1
     f30:	79 f1       	breq	.+94     	; 0xf90 <DIO_enuGetPinValue+0xca>
     f32:	8e 81       	ldd	r24, Y+6	; 0x06
     f34:	9f 81       	ldd	r25, Y+7	; 0x07
     f36:	83 30       	cpi	r24, 0x03	; 3
     f38:	91 05       	cpc	r25, r1
     f3a:	09 f4       	brne	.+2      	; 0xf3e <DIO_enuGetPinValue+0x78>
     f3c:	3d c0       	rjmp	.+122    	; 0xfb8 <DIO_enuGetPinValue+0xf2>
     f3e:	4f c0       	rjmp	.+158    	; 0xfde <DIO_enuGetPinValue+0x118>
			{
			case DIO_u8PORTA: *copy_Pu8Value = GET_BIT(PINA , copy_u8Pin); break;
     f40:	e9 e3       	ldi	r30, 0x39	; 57
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	88 2f       	mov	r24, r24
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	a9 01       	movw	r20, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <DIO_enuGetPinValue+0x92>
     f54:	55 95       	asr	r21
     f56:	47 95       	ror	r20
     f58:	8a 95       	dec	r24
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <DIO_enuGetPinValue+0x8e>
     f5c:	ca 01       	movw	r24, r20
     f5e:	81 70       	andi	r24, 0x01	; 1
     f60:	ec 81       	ldd	r30, Y+4	; 0x04
     f62:	fd 81       	ldd	r31, Y+5	; 0x05
     f64:	80 83       	st	Z, r24
     f66:	3b c0       	rjmp	.+118    	; 0xfde <DIO_enuGetPinValue+0x118>
			case DIO_u8PORTB: *copy_Pu8Value = GET_BIT(PINB , copy_u8Pin); break;
     f68:	e6 e3       	ldi	r30, 0x36	; 54
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	88 2f       	mov	r24, r24
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	a9 01       	movw	r20, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_enuGetPinValue+0xba>
     f7c:	55 95       	asr	r21
     f7e:	47 95       	ror	r20
     f80:	8a 95       	dec	r24
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_enuGetPinValue+0xb6>
     f84:	ca 01       	movw	r24, r20
     f86:	81 70       	andi	r24, 0x01	; 1
     f88:	ec 81       	ldd	r30, Y+4	; 0x04
     f8a:	fd 81       	ldd	r31, Y+5	; 0x05
     f8c:	80 83       	st	Z, r24
     f8e:	27 c0       	rjmp	.+78     	; 0xfde <DIO_enuGetPinValue+0x118>
			case DIO_u8PORTC: *copy_Pu8Value = GET_BIT(PINC , copy_u8Pin); break;
     f90:	e3 e3       	ldi	r30, 0x33	; 51
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	88 2f       	mov	r24, r24
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	a9 01       	movw	r20, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <DIO_enuGetPinValue+0xe2>
     fa4:	55 95       	asr	r21
     fa6:	47 95       	ror	r20
     fa8:	8a 95       	dec	r24
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <DIO_enuGetPinValue+0xde>
     fac:	ca 01       	movw	r24, r20
     fae:	81 70       	andi	r24, 0x01	; 1
     fb0:	ec 81       	ldd	r30, Y+4	; 0x04
     fb2:	fd 81       	ldd	r31, Y+5	; 0x05
     fb4:	80 83       	st	Z, r24
     fb6:	13 c0       	rjmp	.+38     	; 0xfde <DIO_enuGetPinValue+0x118>
			case DIO_u8PORTD: *copy_Pu8Value = GET_BIT(PIND , copy_u8Pin); break;
     fb8:	e0 e3       	ldi	r30, 0x30	; 48
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <DIO_enuGetPinValue+0x10a>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <DIO_enuGetPinValue+0x106>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	ec 81       	ldd	r30, Y+4	; 0x04
     fda:	fd 81       	ldd	r31, Y+5	; 0x05
     fdc:	80 83       	st	Z, r24
			}Local_u8ErrorState = ES_OK;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	05 c0       	rjmp	.+10     	; 0xfee <DIO_enuGetPinValue+0x128>

		}
		else
		{
			Local_u8ErrorState = ES_OUT_OF_RANGE;
     fe4:	83 e0       	ldi	r24, 0x03	; 3
     fe6:	89 83       	std	Y+1, r24	; 0x01
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
     fea:	82 e0       	ldi	r24, 0x02	; 2
     fec:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     fee:	89 81       	ldd	r24, Y+1	; 0x01

}
     ff0:	27 96       	adiw	r28, 0x07	; 7
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	de bf       	out	0x3e, r29	; 62
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	cd bf       	out	0x3d, r28	; 61
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <ADC_enuInitialize>:
/** Functionality   : Setting Pre_Scaler , Voltage_Ref & Adjustment for ADC **/
/*****************************************************************************/
/*****************************************************************************/

ES_t  ADC_enuInitialize(void)
{
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	0f 92       	push	r0
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
	ES_t  Local_enuErrorState = ES_NOK;
    100c:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(ADCSRA , ADCSRA_PS2);
	Local_enuErrorState = ES_OK;

#elif ADC_PRESCALER == PRESCALER_128

	SET_BIT(ADCSRA , ADCSRA_PS0);
    100e:	a6 e2       	ldi	r26, 0x26	; 38
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e6 e2       	ldi	r30, 0x26	; 38
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	81 60       	ori	r24, 0x01	; 1
    101a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADCSRA_PS1);
    101c:	a6 e2       	ldi	r26, 0x26	; 38
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e6 e2       	ldi	r30, 0x26	; 38
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	82 60       	ori	r24, 0x02	; 2
    1028:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADCSRA_PS2);
    102a:	a6 e2       	ldi	r26, 0x26	; 38
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e6 e2       	ldi	r30, 0x26	; 38
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	84 60       	ori	r24, 0x04	; 4
    1036:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(ADMUX , ADMUX_REFS1);
	Local_enuErrorState = ES_OK;

#elif ADC_VOLTAGE_REF == AVCC_VOLTAGE

	SET_BIT(ADMUX , ADMUX_REFS0);
    103c:	a7 e2       	ldi	r26, 0x27	; 39
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e7 e2       	ldi	r30, 0x27	; 39
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	80 64       	ori	r24, 0x40	; 64
    1048:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX , ADMUX_REFS1);
    104a:	a7 e2       	ldi	r26, 0x27	; 39
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e7 e2       	ldi	r30, 0x27	; 39
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	8f 77       	andi	r24, 0x7F	; 127
    1056:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	89 83       	std	Y+1, r24	; 0x01
#endif

	/*Choose ADC Adjustment*/
#if ADC_ADJUSTMENT == RIGHT_ADJUST

	CLEAR_BIT(ADMUX , ADMUX_ADLAR);
    105c:	a7 e2       	ldi	r26, 0x27	; 39
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e7 e2       	ldi	r30, 0x27	; 39
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	8f 7d       	andi	r24, 0xDF	; 223
    1068:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	89 83       	std	Y+1, r24	; 0x01
#else
#error  "ADC Adjustment is Wrong"

#endif

	return  Local_enuErrorState;
    106e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1070:	0f 90       	pop	r0
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <ADC_enuStartConversion>:
/** Functionality   : Start ADC Conversion                                  **/
/*****************************************************************************/
/*****************************************************************************/

ES_t  ADC_enuStartConversion(void)
{
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	0f 92       	push	r0
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1082:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(ADCSRA , ADCSRA_ADSC);//start conversion by setting ADSC bit with 1
    1084:	a6 e2       	ldi	r26, 0x26	; 38
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e6 e2       	ldi	r30, 0x26	; 38
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	80 64       	ori	r24, 0x40	; 64
    1090:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	89 83       	std	Y+1, r24	; 0x01

	return   Local_enuErrorState;
    1096:	89 81       	ldd	r24, Y+1	; 0x01
}
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <ADC_enuPollingSystem>:
/** Functionality   : Use Polling System                                    **/
/*****************************************************************************/
/*****************************************************************************/

ES_t  ADC_enuPollingSystem(void)
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <ADC_enuPollingSystem+0x6>
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    10aa:	1a 82       	std	Y+2, r1	; 0x02
	u8   Local_u8FlagValue = GET_BIT(ADCSRA , ADCSRA_ADIF);
    10ac:	e6 e2       	ldi	r30, 0x26	; 38
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	82 95       	swap	r24
    10b4:	8f 70       	andi	r24, 0x0F	; 15
    10b6:	81 70       	andi	r24, 0x01	; 1
    10b8:	89 83       	std	Y+1, r24	; 0x01

	while(Local_u8FlagValue == 0);//wait on flag
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	88 23       	and	r24, r24
    10be:	e9 f3       	breq	.-6      	; 0x10ba <ADC_enuPollingSystem+0x1a>
	CLEAR_BIT(ADCSRA , ADCSRA_ADIF);//Clear Flag
    10c0:	a6 e2       	ldi	r26, 0x26	; 38
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e6 e2       	ldi	r30, 0x26	; 38
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	8f 7e       	andi	r24, 0xEF	; 239
    10cc:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	8a 83       	std	Y+2, r24	; 0x02

	return   Local_enuErrorState;
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <ADC_enuReadHighValue>:
/** Functionality   : Reading High Value AKA  Highest 8 bits from 2 to 9    **/
/*****************************************************************************/
/*****************************************************************************/

ES_t  ADC_enuReadHighValue(u8* Copy_pu8Value)
{
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <ADC_enuReadHighValue+0x6>
    10e4:	0f 92       	push	r0
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	9b 83       	std	Y+3, r25	; 0x03
    10ec:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    10ee:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value != NULL)
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	9b 81       	ldd	r25, Y+3	; 0x03
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	29 f1       	breq	.+74     	; 0x1142 <ADC_enuReadHighValue+0x64>
		{
			*Copy_pu8Value = ADCH;
		}
		else if(ADC_ADJUSTMENT == RIGHT_ADJUST)
		{
			*Copy_pu8Value |= (ADCL >> 2);
    10f8:	ea 81       	ldd	r30, Y+2	; 0x02
    10fa:	fb 81       	ldd	r31, Y+3	; 0x03
    10fc:	90 81       	ld	r25, Z
    10fe:	e4 e2       	ldi	r30, 0x24	; 36
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	86 95       	lsr	r24
    1106:	86 95       	lsr	r24
    1108:	89 2b       	or	r24, r25
    110a:	ea 81       	ldd	r30, Y+2	; 0x02
    110c:	fb 81       	ldd	r31, Y+3	; 0x03
    110e:	80 83       	st	Z, r24
			*Copy_pu8Value |= (ADCH << 6);
    1110:	ea 81       	ldd	r30, Y+2	; 0x02
    1112:	fb 81       	ldd	r31, Y+3	; 0x03
    1114:	80 81       	ld	r24, Z
    1116:	28 2f       	mov	r18, r24
    1118:	e5 e2       	ldi	r30, 0x25	; 37
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	88 2f       	mov	r24, r24
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	00 24       	eor	r0, r0
    1124:	96 95       	lsr	r25
    1126:	87 95       	ror	r24
    1128:	07 94       	ror	r0
    112a:	96 95       	lsr	r25
    112c:	87 95       	ror	r24
    112e:	07 94       	ror	r0
    1130:	98 2f       	mov	r25, r24
    1132:	80 2d       	mov	r24, r0
    1134:	82 2b       	or	r24, r18
    1136:	ea 81       	ldd	r30, Y+2	; 0x02
    1138:	fb 81       	ldd	r31, Y+3	; 0x03
    113a:	80 83       	st	Z, r24
		}
		Local_enuErrorState = ES_OK;
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <ADC_enuReadHighValue+0x68>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1142:	82 e0       	ldi	r24, 0x02	; 2
    1144:	89 83       	std	Y+1, r24	; 0x01
	}

	return   Local_enuErrorState;
    1146:	89 81       	ldd	r24, Y+1	; 0x01
}
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	cf 91       	pop	r28
    1150:	df 91       	pop	r29
    1152:	08 95       	ret

00001154 <ADC_enuReadData>:
/** Functionality   : Reading All Ten Bits from 0 to 9                      **/
/*****************************************************************************/
/*****************************************************************************/

ES_t  ADC_enuReadData(u16* Copy_pu16Value)
{
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	00 d0       	rcall	.+0      	; 0x115a <ADC_enuReadData+0x6>
    115a:	0f 92       	push	r0
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
    1160:	9b 83       	std	Y+3, r25	; 0x03
    1162:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1164:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu16Value != NULL)
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	9b 81       	ldd	r25, Y+3	; 0x03
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	e9 f0       	breq	.+58     	; 0x11a8 <ADC_enuReadData+0x54>
			*Copy_pu16Value |= (ADCL >> 6);
			*Copy_pu16Value |= (ADCH << 2);
		}
		else if(ADC_ADJUSTMENT == RIGHT_ADJUST)
		{
			*Copy_pu16Value = ADCL;
    116e:	e4 e2       	ldi	r30, 0x24	; 36
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	88 2f       	mov	r24, r24
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	ea 81       	ldd	r30, Y+2	; 0x02
    117a:	fb 81       	ldd	r31, Y+3	; 0x03
    117c:	91 83       	std	Z+1, r25	; 0x01
    117e:	80 83       	st	Z, r24
			*Copy_pu16Value |= ((u16)ADCH << 8);
    1180:	ea 81       	ldd	r30, Y+2	; 0x02
    1182:	fb 81       	ldd	r31, Y+3	; 0x03
    1184:	20 81       	ld	r18, Z
    1186:	31 81       	ldd	r19, Z+1	; 0x01
    1188:	e5 e2       	ldi	r30, 0x25	; 37
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	88 2f       	mov	r24, r24
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	98 2f       	mov	r25, r24
    1194:	88 27       	eor	r24, r24
    1196:	82 2b       	or	r24, r18
    1198:	93 2b       	or	r25, r19
    119a:	ea 81       	ldd	r30, Y+2	; 0x02
    119c:	fb 81       	ldd	r31, Y+3	; 0x03
    119e:	91 83       	std	Z+1, r25	; 0x01
    11a0:	80 83       	st	Z, r24
		}
		Local_enuErrorState = ES_OK;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	89 83       	std	Y+1, r24	; 0x01
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <ADC_enuReadData+0x58>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    11a8:	82 e0       	ldi	r24, 0x02	; 2
    11aa:	89 83       	std	Y+1, r24	; 0x01
	}

	return   Local_enuErrorState;
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <ADC_enuCallBack>:
/** Functionality   : Call Back Fun To call App Function                    **/
/*****************************************************************************/
/*****************************************************************************/

ES_t  ADC_enuCallBack(volatile void(*Copy_pfunAppFun)(void*) , void* Copy_pvidAppParameter)
{
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <ADC_enuCallBack+0x6>
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <ADC_enuCallBack+0x8>
    11c2:	0f 92       	push	r0
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	9b 83       	std	Y+3, r25	; 0x03
    11ca:	8a 83       	std	Y+2, r24	; 0x02
    11cc:	7d 83       	std	Y+5, r23	; 0x05
    11ce:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    11d0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pfunAppFun != NULL)
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	9b 81       	ldd	r25, Y+3	; 0x03
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	79 f0       	breq	.+30     	; 0x11f8 <ADC_enuCallBack+0x3e>
	{
		ADC_pfunISRFun = Copy_pfunAppFun;
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	9b 81       	ldd	r25, Y+3	; 0x03
    11de:	90 93 73 00 	sts	0x0073, r25
    11e2:	80 93 72 00 	sts	0x0072, r24
		ADC_pvidISRParameter = Copy_pvidAppParameter;
    11e6:	8c 81       	ldd	r24, Y+4	; 0x04
    11e8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ea:	90 93 75 00 	sts	0x0075, r25
    11ee:	80 93 74 00 	sts	0x0074, r24
		Local_enuErrorState = ES_OK;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <ADC_enuCallBack+0x42>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    11f8:	82 e0       	ldi	r24, 0x02	; 2
    11fa:	89 83       	std	Y+1, r24	; 0x01
	}

	return   Local_enuErrorState;
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <ADC_enuSelectChannel>:
/** Functionality   : Selecting Channel for ADC                             **/
/*****************************************************************************/
/*****************************************************************************/

ES_t  ADC_enuSelectChannel(u8 Copy_u8ChannelID)
{
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	00 d0       	rcall	.+0      	; 0x1214 <ADC_enuSelectChannel+0x6>
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    121a:	19 82       	std	Y+1, r1	; 0x01

	ADMUX &= ~0x1f;//clearing first 5 bits
    121c:	a7 e2       	ldi	r26, 0x27	; 39
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e7 e2       	ldi	r30, 0x27	; 39
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	80 7e       	andi	r24, 0xE0	; 224
    1228:	8c 93       	st	X, r24

	if(Copy_u8ChannelID >= 0 && Copy_u8ChannelID < 32)
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	80 32       	cpi	r24, 0x20	; 32
    122e:	58 f4       	brcc	.+22     	; 0x1246 <ADC_enuSelectChannel+0x38>
	{
		ADMUX |= Copy_u8ChannelID;
    1230:	a7 e2       	ldi	r26, 0x27	; 39
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e7 e2       	ldi	r30, 0x27	; 39
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	90 81       	ld	r25, Z
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	89 2b       	or	r24, r25
    123e:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	89 83       	std	Y+1, r24	; 0x01
    1244:	02 c0       	rjmp	.+4      	; 0x124a <ADC_enuSelectChannel+0x3c>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1246:	83 e0       	ldi	r24, 0x03	; 3
    1248:	89 83       	std	Y+1, r24	; 0x01
	}

	return   Local_enuErrorState;
    124a:	89 81       	ldd	r24, Y+1	; 0x01
}
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <ADC_enuEnableTriggeringMode>:
/** Functionality   : Select & Enable Triggering Mode                       **/
/*****************************************************************************/
/*****************************************************************************/

ES_t  ADC_enuEnableTriggeringMode(u8 Copy_u8TriggeringSource)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	00 d0       	rcall	.+0      	; 0x125c <ADC_enuEnableTriggeringMode+0x6>
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1262:	19 82       	std	Y+1, r1	; 0x01

	CLEAR_BIT(ADCSRA , ADCSRA_ADATE);//close Triggering Source Before choosing channel
    1264:	a6 e2       	ldi	r26, 0x26	; 38
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e6 e2       	ldi	r30, 0x26	; 38
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	8f 7d       	andi	r24, 0xDF	; 223
    1270:	8c 93       	st	X, r24
	switch(ADC_TRIGGER_SOURCE)
	{

	case FREE_RUNNING_MODE:

		CLEAR_BIT(SFIOR , SFIOR_ADTS0);
    1272:	a0 e5       	ldi	r26, 0x50	; 80
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e0 e5       	ldi	r30, 0x50	; 80
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	8f 7d       	andi	r24, 0xDF	; 223
    127e:	8c 93       	st	X, r24
		CLEAR_BIT(SFIOR , SFIOR_ADTS1);
    1280:	a0 e5       	ldi	r26, 0x50	; 80
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e0 e5       	ldi	r30, 0x50	; 80
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	8f 7b       	andi	r24, 0xBF	; 191
    128c:	8c 93       	st	X, r24
		CLEAR_BIT(SFIOR , SFIOR_ADTS2);
    128e:	a0 e5       	ldi	r26, 0x50	; 80
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e0 e5       	ldi	r30, 0x50	; 80
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	8f 77       	andi	r24, 0x7F	; 127
    129a:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	89 83       	std	Y+1, r24	; 0x01

		break;
	default:
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	SET_BIT(ADCSRA , ADCSRA_ADATE);//Enable Triggering Source after choosing channel
    12a0:	a6 e2       	ldi	r26, 0x26	; 38
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e6 e2       	ldi	r30, 0x26	; 38
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	80 62       	ori	r24, 0x20	; 32
    12ac:	8c 93       	st	X, r24

	return   Local_enuErrorState;
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <ADC_enuDisableTriggeringMode>:
/** Functionality   : Disable Triggering Mode                               **/
/*****************************************************************************/
/*****************************************************************************/

ES_t  ADC_enuDisableTriggeringMode(void)
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	0f 92       	push	r0
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    12c4:	19 82       	std	Y+1, r1	; 0x01

	CLEAR_BIT(ADCSRA , ADCSRA_ADATE);//disable auto triggering bit
    12c6:	a6 e2       	ldi	r26, 0x26	; 38
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e6 e2       	ldi	r30, 0x26	; 38
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	8f 7d       	andi	r24, 0xDF	; 223
    12d2:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	89 83       	std	Y+1, r24	; 0x01

	return   Local_enuErrorState;
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12da:	0f 90       	pop	r0
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <ADC_enuEnable>:
/** Functionality   : Enable ADC                                            **/
/*****************************************************************************/
/*****************************************************************************/

ES_t  ADC_enuEnable(void)
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	0f 92       	push	r0
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    12ec:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(ADCSRA , ADCSRA_ADEN);
    12ee:	a6 e2       	ldi	r26, 0x26	; 38
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e6 e2       	ldi	r30, 0x26	; 38
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	80 68       	ori	r24, 0x80	; 128
    12fa:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01

	return   Local_enuErrorState;
    1300:	89 81       	ldd	r24, Y+1	; 0x01
}
    1302:	0f 90       	pop	r0
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <ADC_enuDisable>:
/** Functionality   : Disable ADC                                           **/
/*****************************************************************************/
/*****************************************************************************/

ES_t  ADC_enuDisable(void)
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	0f 92       	push	r0
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1314:	19 82       	std	Y+1, r1	; 0x01

	CLEAR_BIT(ADCSRA , ADCSRA_ADEN);
    1316:	a6 e2       	ldi	r26, 0x26	; 38
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e6 e2       	ldi	r30, 0x26	; 38
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	8f 77       	andi	r24, 0x7F	; 127
    1322:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	89 83       	std	Y+1, r24	; 0x01

	return   Local_enuErrorState;
    1328:	89 81       	ldd	r24, Y+1	; 0x01
}
    132a:	0f 90       	pop	r0
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <ADC_enuEnableInterruptMode>:
/** Functionality   : Enable Interrupt Mode                                 **/
/*****************************************************************************/
/*****************************************************************************/

ES_t  ADC_enuEnableInterruptMode(void)
{
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	0f 92       	push	r0
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    133c:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(ADCSRA , ADCSRA_ADIE); //set ADC Interrupt enable bit to one
    133e:	a6 e2       	ldi	r26, 0x26	; 38
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e6 e2       	ldi	r30, 0x26	; 38
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	88 60       	ori	r24, 0x08	; 8
    134a:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	89 83       	std	Y+1, r24	; 0x01

	return   Local_enuErrorState;
    1350:	89 81       	ldd	r24, Y+1	; 0x01
}
    1352:	0f 90       	pop	r0
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <ADC_enuDisableInterruptMode>:
/** Functionality   : Disable Interrupt Mode                                **/
/*****************************************************************************/
/*****************************************************************************/

ES_t  ADC_enuDisableInterruptMode(void)
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	0f 92       	push	r0
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1364:	19 82       	std	Y+1, r1	; 0x01

	CLEAR_BIT(ADCSRA , ADCSRA_ADIE); //clear ADC Interrupt enable bit
    1366:	a6 e2       	ldi	r26, 0x26	; 38
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e6 e2       	ldi	r30, 0x26	; 38
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	87 7f       	andi	r24, 0xF7	; 247
    1372:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	89 83       	std	Y+1, r24	; 0x01

	return   Local_enuErrorState;
    1378:	89 81       	ldd	r24, Y+1	; 0x01
}
    137a:	0f 90       	pop	r0
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <__vector_16>:


/*ISR Fun For ADC*/
ISR(VECT_ADC)
{
    1382:	1f 92       	push	r1
    1384:	0f 92       	push	r0
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	0f 92       	push	r0
    138a:	11 24       	eor	r1, r1
    138c:	2f 93       	push	r18
    138e:	3f 93       	push	r19
    1390:	4f 93       	push	r20
    1392:	5f 93       	push	r21
    1394:	6f 93       	push	r22
    1396:	7f 93       	push	r23
    1398:	8f 93       	push	r24
    139a:	9f 93       	push	r25
    139c:	af 93       	push	r26
    139e:	bf 93       	push	r27
    13a0:	ef 93       	push	r30
    13a2:	ff 93       	push	r31
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfunISRFun != NULL)
    13ac:	80 91 72 00 	lds	r24, 0x0072
    13b0:	90 91 73 00 	lds	r25, 0x0073
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	49 f0       	breq	.+18     	; 0x13ca <__vector_16+0x48>
	{
		ADC_pfunISRFun(ADC_pvidISRParameter);
    13b8:	e0 91 72 00 	lds	r30, 0x0072
    13bc:	f0 91 73 00 	lds	r31, 0x0073
    13c0:	80 91 74 00 	lds	r24, 0x0074
    13c4:	90 91 75 00 	lds	r25, 0x0075
    13c8:	09 95       	icall
	}

}
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	ff 91       	pop	r31
    13d0:	ef 91       	pop	r30
    13d2:	bf 91       	pop	r27
    13d4:	af 91       	pop	r26
    13d6:	9f 91       	pop	r25
    13d8:	8f 91       	pop	r24
    13da:	7f 91       	pop	r23
    13dc:	6f 91       	pop	r22
    13de:	5f 91       	pop	r21
    13e0:	4f 91       	pop	r20
    13e2:	3f 91       	pop	r19
    13e4:	2f 91       	pop	r18
    13e6:	0f 90       	pop	r0
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	0f 90       	pop	r0
    13ec:	1f 90       	pop	r1
    13ee:	18 95       	reti

000013f0 <main>:

#include "../MCAL/ADC/ADC_Interface.h"


int main()
{
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	00 d0       	rcall	.+0      	; 0x13f6 <main+0x6>
    13f6:	0f 92       	push	r0
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
	u8  ADC_READ_8_Bit = 0;
    13fc:	1b 82       	std	Y+3, r1	; 0x03
	u16 ADC_READ_16_Bit = 0;
    13fe:	1a 82       	std	Y+2, r1	; 0x02
    1400:	19 82       	std	Y+1, r1	; 0x01

	PORT_voidInit();
    1402:	0e 94 49 00 	call	0x92	; 0x92 <PORT_voidInit>

	ADC_enuInitialize();
    1406:	0e 94 01 08 	call	0x1002	; 0x1002 <ADC_enuInitialize>
	ADC_enuEnable();
    140a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <ADC_enuEnable>
	ADC_enuSelectChannel(2);
    140e:	82 e0       	ldi	r24, 0x02	; 2
    1410:	0e 94 07 09 	call	0x120e	; 0x120e <ADC_enuSelectChannel>
    ADC_enuDisableTriggeringMode();//work in single Mode
    1414:	0e 94 5d 09 	call	0x12ba	; 0x12ba <ADC_enuDisableTriggeringMode>
	ADC_enuDisableInterruptMode();
    1418:	0e 94 ad 09 	call	0x135a	; 0x135a <ADC_enuDisableInterruptMode>

    while(1)
	{

    	ADC_enuStartConversion();
    141c:	0e 94 3c 08 	call	0x1078	; 0x1078 <ADC_enuStartConversion>
    	ADC_enuPollingSystem();
    1420:	0e 94 50 08 	call	0x10a0	; 0x10a0 <ADC_enuPollingSystem>
        ADC_enuReadHighValue(&ADC_READ_8_Bit);
    1424:	ce 01       	movw	r24, r28
    1426:	03 96       	adiw	r24, 0x03	; 3
    1428:	0e 94 6f 08 	call	0x10de	; 0x10de <ADC_enuReadHighValue>
        DIO_enuSetPortValue(DIO_u8PORTC , ADC_READ_8_Bit);
    142c:	9b 81       	ldd	r25, Y+3	; 0x03
    142e:	82 e0       	ldi	r24, 0x02	; 2
    1430:	69 2f       	mov	r22, r25
    1432:	0e 94 be 04 	call	0x97c	; 0x97c <DIO_enuSetPortValue>
    1436:	f2 cf       	rjmp	.-28     	; 0x141c <main+0x2c>

00001438 <_exit>:
    1438:	f8 94       	cli

0000143a <__stop_program>:
    143a:	ff cf       	rjmp	.-2      	; 0x143a <__stop_program>
